


ZQ车机注册服务功能，ZQCarRegiService

需求文档：
https://mubu.com/doc/5PDHHtHNu
密码：4hyv

框架选型，基于Spring Boot：
表现层：Spring MVC
业务层：Spring
持久层：

构建工具选用 Maven
(三个项目构建工具 Ant/Gradle/Maven)

windows测试，其他设备连接本机服务器时，需要关闭防火墙。

------------------------------------------------------

5个表：
userInfo  用户信息，目前只有一个用户，管理员。有添加wifi的权限
authInfo   认证信息：wifi名称，wifi地址，remain_count允许注册数
authLog   认证日志：乐观锁机制，记录authInfo的每一条增减操作
btRegInfo  设备的蓝牙注册信息(蓝牙注册文件暂时不放这里，以后再整合)
btFiles  存储已经注册了的设备的蓝牙注册文件


C/S 通信，全部使用post请求，json提交，Content-Type : application/json ,

客户端需要与Service交互：
1. 获取蓝牙是否正常工作状态, 通过在carBTService中setprop解决
2. setprop "ctl.restart", "bt_sdk"，重启蓝牙
3. 获取蓝牙是否注册成功，setprop解决加发送广播解决


第一步，Spring MVC构建 功能简单的表现层，返回 结构简单的get/post响应
第二步，MongoDB数据库移植进项目中
第三步，构建持久层，第一个持久层数据 userInfo  
第四步，编写简单业务层：操作持久层，在表现层中返回响应

查询接口编写
测试Bean的List接口，上传文件内容BASE-64编码
客户端蓝牙注册监听
添加管理员表，添加post接口，管理员功能表
将注册时的文件和 wifi名同时上传
协商好查询、注册 等等连接后端的字段

线程池处理多业务，加锁，防止重复消耗注册数
所有的增减操作都要先生成一个唯一操作序列号, 再生成一个操作记录, 最后再更新数值

----------


Docker服务器布署

测试：在Windows上下载docker，把两个镜像发布上去，一个MongoDB，一个javaWeb
紫旗车机服务发布到互联网上


----------

流程：
1. 客户端请求注册，发送wifi信息给服务端
2. 服务端检查wifi表，发出允许注册信息
3. 客户端收到信息，设置bt_sdk并重启蓝牙，
4. 客户端蓝牙注册监听到注册成功，客户端检查4个蓝牙注册文件，客户端将四个文件发给服务端(文件读取并base64编码)
5. 服务端接收4个注册文件并存储到数据库中

乐观锁，防止脏读后数据的提交，AuthLog记录操作和版本号，提交版本必须大于记录当前版本才能执行更新
有一个字段version，当前线程读取version并赋值给 v1并v1自加一，并对数据进行操作，
接着在提交修改之后数据时，再次取出version并赋值给v2变量，当v1大于v2时允许此次提交。
测v1小于或等于v2时丢弃此次数据更新，返回错误提示。
AuthLog记录操作是对authInfo的remain_count字段进行修改的记录表，只有加或者减两种操作，减只能减1，加可以任意正整数

持久层，数据库操作时，需要注意的问题：
插入数据时，如果有唯一取值，例如主键，需要注意 唯一性冲突问题。
更新数据时，需要注意一致性问题。

----------

悲观锁，简单的理解就是把需要的数据全部加锁，在事务提交之前，这些数据全部不可读取和修改。
select * from user where uid=1 for update;
update user  set name='bac'  where uid=1;
这样，uid为1的这行记录，就被锁住，在事务提交之前，他不可被其他事务读取和修改。
select... for update锁表

乐观锁
select uid,name,version from user where uid=1;
假设本次查询version=1，在更新操作时，
update user set name='abc', version=version+1 where uid=1 and version=1
这样，当其他事务在本次事务提交之前更新了，version就会+1，就不是刚才查询到的1，本次update 就失败。

------------------------------------------------------

加了 @RequestMapping注解的方法可以响应来自 客户端访问某一个url的响应。
例如有多台设备同时访问这一个url， 即同时访问同一个 @RequestMapping注解的方法，
此时，启动不同的多条子线程来响应每一个客户端的访问，每一个子线程负责响应一个设备的访问。
这些子线程可以被重复使用。

------------------------------------------------------

注解相关：

@RestController


@RequestMapping
一个用来处理请求地址映射的注解，可用于类或方法上。
用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径； 
用于方法上，表示在类的父路径下追加方法上注解中的地址将会访问到该方法，
此处需注意 @RequestMapping用在类上可以没用 ，但是用在方法上必须有。

1、 value， method；
value：     指定请求的实际地址，指定的地址可以是URI Template 模式（后面将会说明）；
method：  指定请求的method类型， GET、POST、PUT、DELETE等；
还有一个注意的， @RequestMapping的默认属性为value， 所以 @RequestMapping (value= "/example") 和 @RequestMapping("/example")是等价的。

2、 consumes，produces；
consumes： 指定处理请求的提交内容类型（Content-Type），例如application/json, text/html;
produces:  指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回；

3、 params，headers；
params： 指定request中必须包含某些参数值是，才让该方法处理。
headers： 指定request中必须包含某些指定的header值，才能让该方法处理请求。


@RequestBody
@PostMapping("/request")
public ResponseEntity postController(@RequestBody LoginForm loginForm) {
    exampleService.fakeAuthenticate(loginForm);
    return ResponseEntity.ok(HttpStatus.OK);
}
public class LoginForm {
    private String username;
    private String password;
    // ...
}


------------------------------------------------------

Spring MVC

添加控制器：
@Controller
public class GreetingController {
}


------------------------------------------------------

持久层：
准备工作分三步：
第一步：安装MongoDB，启动MongoDB服务。

第二步：pom.xml添加mongodb依赖库：spring-boot-starter-data-mongodb，
持久层用mongodb的依赖库实现。

第三步：application.properties，配置连接数据库：
spring.data.mongodb.uri=mongodb://localhost:27017/runoob
runoob是数据库名称（不需要事前创建好数据库，MongoDB会自动创建好没有的数据库），27017是mongodb服务的端口
注意：//localhost:27017/runoob 走的都是 MongoDB服务默认配置，如果MongoDB服务那边不是默认的，
按照MongoDB服务的配置修改连接信息。

org.springframework.boot.autoconfigure.mongo提供了对mongoDB连接字符串的配置支持。我们对指定属性进行配置即可。 
2.4以上版本使用如下连接配置：
spring.data.mongodb.uri=mongodb://root(userName):root(password)@localhost(ip地址):27017(端口号)/gis(collections/数据库)

---------------

一些经验：
springboot内置了mongoDB驱动，默认配置localhost:27017，
如果只是本机运行mongodb服务，其实也不需要在application.properties中配置mongodb
如果使用了mongodb注解的相关代码，而mongodb又没有启动服务，那么webApp会启动失败并且报错，官方原文档:
To access Mongo databases, you can inject an auto-configured org.springframework.data.mongodb.MongoDbFactory.
By default, the instance tries to connect to a MongoDB server at mongodb://localhost/test.

官方基础教程：https://spring.io/guides/gs/accessing-data-mongodb/
官方文档：https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-mongodb
根据这个教程，是没有在application.properties中配置mongodb的。
联的是默认配置。


---------------

代码开发：
模型：
public class Customer {
    @Id
    public String id;
    public String firstName;
    public String lastName;
    public Customer() {}
    public Customer(String firstName, String lastName) {
        this.firstName = firstName;
        this.lastName = lastName;
    }
}

DAO：
public interface CustomerRepository extends MongoRepository<Customer, String> {
    public Customer findByFirstName(String firstName);
    public List<Customer> findByLastName(String lastName);
    // UserInfo findByUsernameAndPassword(String name, String pw);
}

入口执行：
@SpringBootApplication
public class CarregiApplication  implements CommandLineRunner {
    @Autowired
    private CustomerRepository repository;
    public static void main(String[] args) {
        SpringApplication.run(CarregiApplication.class, args);
    }
    @Override
    public void run(String... args) throws Exception {
        repository.deleteAll();
        repository.save(new Customer("Alice", "Smith"));
        repository.save(new Customer("Bob", "Smith"));
    }
}


之后，在MongoDB的数据库中查看到数据已经存进了数据库的集合：
> use runoob
switched to db runoob
> show collections
customer
runoob
> db.customer.find()
{ "_id" : ObjectId("5b1b78be44fbd50de4b38b3d"), "firstName" : "Alice", "lastName" : "Smith", "_class" : "ziqi.carregi.dao.Customer" }
{ "_id" : ObjectId("5b1b78be44fbd50de4b38b3e"), "firstName" : "Bob", "lastName" : "Smith", "_class" : "ziqi.carregi.dao.Customer" }

------------------------------------------------------

SpringBoot的mongodb框架（Spring Data for MongoDB）：spring-boot-starter-data-mongodb
可以在pom.xml加入依赖。
进一步理解这个框架：
接口MongoRepository的实现类都有save这个方法。
MongoTemplate也有这个方法，
template.save()同时具有update和insert两种功能，

当主键重复时，update操作
当没有这一个主键时，insert操作

例如：
@Document
public class TestObj {
    @Id
    String id;
    String firstname;
    String lastname;
    @Version
    Long version;
    // 一大堆get()和set()
}
public interface TestObjRepository extends MongoRepository<TestObj, String> {
    TestObj getTestObjById (String id);
}

调用之前先创建两个DAO，再往数据库中存一行数据
@Autowired
private TestObjRepository template;
@Autowired
private MongoTemplate mongoTemplate;

TestObj t = new TestObj("Daenerys");
t.setId("123456");
template.save(t);


(1)更新，如果主键与之前的某一行相同，update操作：
TestObj daenerys = template.getTestObjById("123456");
daenerys.setLastname("Targaryen");
template.save(daenerys);

(2)插入，如果主键没有与之前的某一行相同，insert操作：
TestObj t2 = new TestObj("Daenerys");
t2.setId("654321");
template.save(t2);

----------------

使用乐观锁Optimistic Lock, 

TestObj只需要加上就可以
@Version
Long version;

普通调用，取到daenerys，在save()进去时version会自加一，不需要再额外写入代码：
TestObj daenerys = template.getTestObjById("123456");
template.save(daenerys); 

调用（乐观锁产生作用，抛出乐观锁失效异常）：
TestObj tmp = template.getTestObjById("123456");
TestObj daenerys = template.getTestObjById("123456");
template.save(tmp);
template.save(daenerys); // throws OptimisticLockingFailureException, 这里会导致乐观锁Exception，程序崩溃

sava两次调用：
TestObj tmp = template.getTestObjById("123456");
template.save(tmp);
template.save(tmp);
这里不会有异常，tmp被save()进去时，tmp对象里面的version会被加1，再次save()进去时会再次加一
假设tmp里的version未设置时为1，第一次save时version为2，第二次save时version为3，

save调用时，只需要满足new version >= old version就可以，
数据库和对象的new version都会自加一


使用mongoTemplate的update，没测过：


----------------

注意：
SpringBoot+MongoDB 实现乐观锁 不需要加入Spring-data-JPA这个框架，这是给SQL用的。
目前JPA的主要实现有Hibernate、EclipseLink、OpenJPA等。
这些都是封装了JDBC，实现了ORM框架的 javaWeb框架。

------------------------------------------------------

？？？：
ApplicationRunner
CommandLineRunner

db.idAndFiles.drop()
db.deviceInfo.drop()
db.userInfo.find()

{"wifi_mac_address" : "60:45:cb:b0:a3:38", "wifi_name" : "ZIQI_WORK", "remain_count" : "200", "_class" : "ziqi.carregi.model.UserInfo" }

use runoob
db.btRegInfo.drop()
db.idAndFiles.drop()
db.authInfo.drop()


------------------------------------------------------

MongoDB基于NoSQL，非关系型数据库，
特点是数据随意组合，键值对，扩展方便，结构类似于JSON。

MongoDB使用(需要安装并配置环境变量)

SQL术语/概念	MongoDB术语/概念	解释/说明
database	database		数据库
table		collection		数据库表/集合
row		document		数据记录行/文档
column		field			数据字段/域
index		index			索引
table joins	无 			表连接,MongoDB不支持
primary key	primary key		主键,MongoDB自动将_id字段设置为主键

特别注意：collection(集合)相当于SQL中的表

-----------------

启动MongoDB服务：
1. 打开一个终端, cd进入 E:\Work_App\MongoDB\bin

2. 执行方式1，默认方式执行，默认情况下的 ip和端口 127.0.0.1:27017：
   mongod -dbpath "E:\Work_App\MongoDB\Data\db" 或者 mongod --dbpath ./
   
   执行方式2，加入ip地址，这个IP地址是本机ip地址，
   这样其他设备就可以通过这个ip地址访问本机的MongoDB：mongod -dbpath ./ --bind_ip 192.168.18.102

   执行方式3，开启验证，192.168.18.102是本机IP：mongod -dbpath ./ --bind_ip 192.168.18.102 --auth
   
3. 2步的命令是 将mongodb的数据库文件创建到E:\Work_App\MongoDB\Data\db
   并且开启MongoDB服务

4. 在使用MongoDB的过程中，需要一直保持MongoDB服务开启状态，
   不使用时，ctrl+C 键可以退出

（本机环境：
cd E:\Develop\dbData
mongod -dbpath ./
）

-----------------

MongoDB服务，启用用户认证：

(1) 在启用用户认证前需要创建超级管理员用户。
先开启无需认证的MongoDB服务：
cd E:\Develop\dbData
mongod -dbpath ./

在另一个终端执行连接命令：
mongo

进到admin数据库中创建超级用户：
use admin
db.createUser({user:'root',pwd:'123456',roles:[{ "role" : "root", "db" : "admin" }]})

创建完了之后可以使用命令查看：
show collections
会发现已经创建了一个system.users的数据库
再使用：
db.system.users.find()
会发现已经有了一行超级用户的信息


(2) 创建完了之后退出无需认证的MongoDB服务，另一个终端退出mongo连接


(3) 用户认证和普通用户的创建：
如果加了-auth启动了MongoDB服务，那么是需要用户认证的。
mongod --dbpath [数据存放path] -auth //开启授权启动

在另一个终端执行连接命令：mongo
接着执行：show dbs 
此时会发现报错，因为没有认证。

接着执行命令，进行超级用户认证：
use admin
db.auth('root','123456')
此时会输出1，表示认证成功，如果输出0就是失败。

超级用户拥有一切功能，此时可以在这个用户下进行 全部的数据库的增删改查操作

(4) 接着创建 zqregi数据库 的普通用户，具有读写权限。
之后，服务端那边就用这个普通用户来连接和执行各种针对 zqregi数据库的操作。
执行命令：
use zqregi
db.createUser({user:'zquser1',pwd:'zq123456',roles:[{ "role" : "readWrite", "db" : "zqregi" }]})
或者 db.createUser({user:'zquser2',pwd:'zq963852',roles:[{ "role" : "readWrite", "db" : "zqregi" }]})
注意：想要 创建zqregi数据库的用户，就必须先use zqregi，再创建用户。
实测过，有没有执行use zqregi命令，创建出来的用户是不同的。db.system.users.find()可以看到是不同的。

创建完了之后再次重新进到admin，并查找一下：
use admin
db.system.users.find()
会发现又多了一行关于"zqregi"数据库的用户信息


(5) ctrl+c 退出mongodb连接，再次执行命令进去：mongo
接着认证zqregi数据库db.auth()：
use zqregi
db.auth('zquser1','zq123456')
或者 db.auth('zquser2','zq963852')
认证完了之后,此时会输出1，表示认证成功，接着就可以对这个数据操作了，
但是此时，只能对这个数据库操作，如果进到其他的数据库执行操作是会报错的。


(6)修改用户和删除用户等等, 都和创建用户一样,需要切换到数据库管理员的身份。
也就是需要先切换到admin库, 完成认证, 才能进行后面的操作。
同样需要到对应数据库去操作用户，因为用户是跟着库走的。

删除用户：
use testDB
db.dropUser('test')

修改用户：
use testDB
db.updateUser('test',{user:'test',pwd:'admin',roles:[{role:'read',db:'testDB'}]})  //修改密码 并且 //修改角色为只读


(7) db.createUser() 命令规范，例如：
{
 user:'root',
 pwd:'123456',
 roles:[{ "role" : "root", "db" : "admin" }]
}
user就是用户名。pwd就是密码。roles是角色。
"role" : "root"  表示的是超级用户，role还有其他可选：read，readWrite，userAdmin，readWriteAnyDatabase等等，
                 一共有十几个role可选，例如："role" : "read" 表示的是只读权限
"db" : "admin" 表示的是哪一个数据库，一般情况下是之前的调用use命令的那一个，例如：use admin，那么这里"db"就要写"admin"


(8)后端的数据库验证配置
SpringBoot的application.properties配置：
spring.data.mongodb.uri=mongodb://zquser1:zq123456@localhost:27017/zqregi


-----------------

连接MongoDB：
1. 打开另一个终端，启动MongoDB服务的终端不要关闭，也不能关闭MongoDB服务

2. 执行方式1：mongo ，执行之后就可以输入mongoDB的命令
   执行方式2：mongo 134.567.345.23:27017 ，加上了ip地址和端口

3. 执行help，show dbs (这个命令是查看所有数据库)，db (当前正在使用的数据库)，等命令查看数据库状态
4. use runoob (需要切到具体某个数据库才能使用那个数据库，
		这个命令切换到runoob数据库，如果runoob不存在，会在插入数据时创建这个数据库)
5. db.runoob.insert({"name":"wrx"})  
	往runoob数据库插入数据，如果之前runoob不存在，这里会真正的创建一个数据库文件
	没有集合也可以插入数据
6. db.runoob.find()  查看runoob数据
7. db.dropDatabase() 删除数据库命令，删除当前数据库，当前是runoob，所以runoob会被删除
8. ctrl+C 键可以退出

-----------------

集合：
1. db.createCollection(name, options)
	参数说明：
	name: 要创建的集合名称
	options: 可选参数, 指定有关内存大小及索引的选项
	例如：db.createCollection("mycol",{capped:true,autoIndexId:true,size:6142800,max:10000})
	db.createCollection("runcoll")
2. show collections 显示当前数据库集合
3. db.collectionName.find()  查看collectionName这个集合 所有的数据
4. db.collection.drop() 删除集合
       例如 db.mycol.drop()

-----------------

插入文档：
db.collectionName.insert(document)
例如，col是集合：
db.col.insert({title: 'MongoDB 教程',description: 'MongoDB 是一个 Nosql 数据库',by: '菜鸟教程',
    url: 'http://www.runoob.com',tags: ['mongodb', 'database', 'NoSQL'],likes: 100
})
查看已插入文档：
db.col.find()
{ "_id" : ObjectId("56064886ade2f21f36b03134"), "title" : "MongoDB 教程",
"description" : "MongoDB 是一个 Nosql 数据库", "by" : "菜鸟教程", 
"url" : "http://www.runoob.com", "tags" : [ "mongodb", "database", "NoSQL" ], "likes" : 100 }

-----------------

更新：
db.collection.update(
   <query>,
   <update>,
   {
     upsert: <boolean>,
     multi: <boolean>,
     writeConcern: <document>
   }
)
query : update的查询条件，类似sql update查询内where后面的。
update : update的对象和一些更新的操作符（如$,$inc...）等，也可以理解为sql update查询内set后面的
upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。
multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。
writeConcern :可选，抛出异常的级别。
实例：
先插入数据：
db.col.insert({
    title: 'MongoDB 教程', 
    description: 'MongoDB 是一个 Nosql 数据库',
    by: '菜鸟教程',
    url: 'http://www.runoob.com',
    tags: ['mongodb', 'database', 'NoSQL'],
    likes: 100
})
通过 update() 方法来更新标题(title):
db.col.update({'title':'MongoDB 教程'},{$set:{'title':'MongoDB'}})
save() 方法，通过传入的文档来替换已有文档：
db.collection.save(
   <document>,
   {
     writeConcern: <document>
   }
)
参数说明：
document : 文档数据。
writeConcern :可选，抛出异常的级别。
替换了 _id 为 56064f89ade2f21f36b03136 的文档数据：
>db.col.save({
    "_id" : ObjectId("56064f89ade2f21f36b03136"),
    "title" : "MongoDB",
    "description" : "MongoDB 是一个 Nosql 数据库",
    "by" : "Runoob",
    "url" : "http://www.runoob.com",
    "tags" : [
            "mongodb",
            "NoSQL"
    ],
    "likes" : 110
})
替换成功后，我们可以通过 find() 命令来查看替换后的数据：
db.col.find().pretty()

-----------------

删除文档：
db.collection.remove(
   <query>,
   <justOne>
)
db.collection.remove(
   <query>,
   {
     justOne: <boolean>,
     writeConcern: <document>
   }
)
参数说明：
query :（可选）删除的文档的条件。
justOne : （可选）如果设为 true 或 1，则只删除一个文档。
writeConcern :（可选）抛出异常的级别。

>db.col.remove({'title':'MongoDB 教程'})

------------------

查询
MongoDB 查询数据的语法格式如下：
db.collection.find(query, projection)
query ：可选，使用查询操作符指定查询条件
projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。

如果你需要以易读的方式来读取数据，可以使用 pretty() 方法，语法格式如下：
> db.col.find().pretty()
查询了集合 col 中的数据：
> db.col.find().pretty()

------------------------------------------------------

docker
官网：https://www.docker.com/
Docker Hub：https://hub.docker.com/

windows ：
下载DockerToolBox：https://docs.docker.com/toolbox/overview/#whats-in-the-box
或者直接下载(Docker for Windows Installer)：https://download.docker.com/
官方get start教程：https://docs.docker.com/get-started/ ；https://docs.docker.com/docker-for-windows/


DockerToolBox下载完直接安装，安装完成之后，命令行测试安装情况：
docker --version
docker version
以上两条命令都可以，有打印信息输出就表示安装成功
安装完成之后，桌面有三个快捷方式图标
Oracle VM VirtualBox
Docker Quickstart Terminal
Kitematic (Alpha)

点击Docker Quickstart Terminal，快速开始，会发现找不到bash对话框弹出
如果之前已经安装了git，需要右键-属性，将以下快捷方式指向修改为当前git-bash的路径
"C:\Program Files\Git\bin\bash.exe" -> D:\Git\bin\bash.exe

在$后输入各种docker命令就可以使用docker了，不需要像ubuntu中那样使用sudo！ 
查看docker的版本信息
docker info



-------------------

测试Docker安装
通过运行简单的Docker镜像hello-world来测试您的安装是否工作正常：
docker run hello-world
注意：如果是第一次运行hello-world镜像，那么这个镜像是没有的，
接着会从DockerHub公共镜像源 下载hello-world镜像并执行

命令查看镜像(都可以单独使用)：
docker image
docker image ls 
docker container ls --all
结果，可以看到已经有一个名为hello-world的镜像：
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
hello-world         latest              e38bc07ac18e        2 months ago        1.85kB

REPOSITORY：表示镜像的仓库源
TAG：镜像的标签
IMAGE ID：镜像ID
CREATED：镜像创建时间
SIZE：镜像大小
-------------------

查看当前所有的运行中的进程（容器），主要是用来看ID的
docker ps

查看所有的容器，停止的也会显示
docker ps -a 

停止一个容器，ID是容器的ID
docker stop ID
停止所有容器
docker stop $(docker ps -a -q)
启动一个容器：
docker start ID

注意：当镜像被跑起来之后run，就已经生成了一个容器，以后只需要对这个容器开启和关闭就可以了，
不需要再对镜像run命令。

删除容器， 删除前需要保证容器是停止的stop
docker rm <container id>
删除所有容器
docker rm $(docker ps -a -q)

删除镜像image，注意，删除镜像可能会报错，需要停止这一个镜像的容器
docker rmi <image id>

想要删除untagged images，也就是那些id为<None>的image的话可以用
docker rmi $(docker images | grep "^<none>" | awk "{print $3}")

docker rmi repository:tag
repository是仓库名
tag是tag
例如：docker rmi docker.io/redis:3.2

docker rmi -f 镜像ID
强制删除，如果有多个同ID镜像，会删除全部

要删除全部image的话
docker rmi $(docker images -q)

-------------------

同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，如ubuntu仓库源里，
有15.10、14.04等多个不同的版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。
所以，我们如果要使用版本为15.10的ubuntu系统镜像来运行容器时，命令如下：
runoob@runoob:~$ docker run -t -i ubuntu:15.10 /bin/bash 
root@d77ccb2e5cca:/#

如果要使用版本为14.04的ubuntu系统镜像来运行容器时，命令如下：
runoob@runoob:~$ docker run -t -i ubuntu:14.04 /bin/bash 
root@39e968165990:/# 

如果你不指定一个镜像的版本标签，例如你只使用 ubuntu，docker 将默认使用 ubuntu:latest (最新)镜像。

-------------------

当我们在本地主机上使用一个不存在的镜像时 Docker 就会自动下载这个镜像。
如果我们想预先下载这个镜像，我们可以使用 docker pull 命令来下载它。
Crunoob@runoob:~$ docker pull ubuntu:13.10

-------------------

查找镜像
我们可以从 Docker Hub 网站来搜索镜像，Docker Hub 网址为： https://hub.docker.com/
我们也可以使用 docker search 命令来搜索镜像。
比如我们需要一个httpd的镜像来作为我们的web服务。
我们可以通过 docker search 命令搜索 httpd 来寻找适合我们的镜像。
runoob@runoob:~$  docker search httpd

NAME:镜像仓库源的名称
DESCRIPTION:镜像的描述
OFFICIAL:是否docker官方发布

-------------------

创建镜像
当我们从docker镜像仓库中下载的镜像不能满足我们的需求时，我们可以通过以下两种方式对镜像进行更改。
1.从已经创建的容器中更新镜像，并且提交这个镜像
2.使用 Dockerfile 指令来创建一个新的镜像

-------------------

容器和镜像：
镜像就是静态文件，容器就是运行镜像之后的程序，
镜像中包含了启动一个容器所需的所有文件。

-------------------

springBoot创建镜像文件，已有一个SpringBoot项目，基于Maven，
项目路径：E:\Develop\ZQCarRegiService\
项目的名称是：carregi
运行的app是: ziqi.carregi.CarregiApplication

1. 在pom.xml再加入两个配置：
    <properties>
	...
        <docker.image.prefix>springio</docker.image.prefix>
    </properties>
    
    <build>
        <plugins>
	    ...
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>1.3.6</version>
                <configuration>
                    <repository>${docker.image.prefix}/${project.artifactId}</repository>
                    
		    <!--<tag>1.0.1</tag>-->
		    
		    <buildArgs>
                        <JAR_FILE>target/${project.build.finalName}.jar</JAR_FILE>
                    </buildArgs>
                </configuration>
            </plugin>
        </plugins>
    </build>
注意，这里最好加上tag标签（被注释掉的那一行），不然就是tag就是latest

2. 项目的根目录加入文件 Dockerfile，并配置该文件：
FROM openjdk:8-jdk-alpine
VOLUME /tmp
ARG JAR_FILE
COPY ${JAR_FILE} app.jar
ENTRYPOINT ["java","-Djava.security.egd=file:/dev/./urandom","-jar","/app.jar"]

3. build镜像，项目根目录下，启动终端并执行命令：
./mvnw install dockerfile:build

Windows下需要安装maven并配置好路径并执行：
mvnw install dockerfile:build   // Windows执行不加./

命令走完了之后，可以看到输出文件信息：
E:\Develop\ZQCarRegiService\target\carregi-0.0.1-SNAPSHOT-docker-info.jar

注意，这条编译命令很坑，会跑起test.ziqi.carregi下面的测试文件，
如果这时 mongodb服务没开，或者是验证用户名、密码错误就会报错，导致编译失败。
这里将test.ziqi.carregi下的 @Test 测试注解注释掉，再执行dockerfile:build

4. push到 dockerHub，
4.1 使用mvnw进行push
将<properties>的springio替换成自己的dockerHub用户名。
pom.xml再加入配置：
<executions>
	<execution>
		<id>default</id>
		<phase>install</phase>
		<goals>
			<goal>build</goal>
			<goal>push</goal>
		</goals>
	</execution>
</executions>
根目录下终端执行命令：
./mvnw dockerfile:push

4.2 使用docker命令push：
将<properties>的springio替换成自己的dockerHub用户名
在发布一次到本地docker：mvnw install dockerfile:build

push前需要登录命令：
docker login -u 用户名 -p 密码
把latest，id为5235feabef5f的carregi打一个tag，版本打为1.0.0
docker tag 5235feabef5f 2881486114/carregi:1.0.0
push到dockerHub
docker push 2881486114/carregi:1.0.0

docker logout //登出命令



5. 运行镜像：
打开Docker Quickstart Terminal
docker image ls 可以看到已经生成了一个镜像 springio/carregi 
这个镜像是第(3)步时生成的，springio是在(1)步骤时pom.xml中配置的，
springio指的是用户名，想要传到dockerHub必须替换成dockerHub上自己的用户名
运行这个镜像：
docker run -p 8080:8080 -t springio/carregi
运行完之后，在http://localhost:8080 下可以访问这个app

如果是在Windows系统下，由于docker是运行在虚拟机 Oracle VM VirtualBox上的。
所以http://localhost:8080是无法访问。这时打开VirtualBox，可以看到有一个default的虚拟机正在运行。
查找一下这个 default虚拟机的IP地址，IP地址+8080端口可以访问这个web app

-------------------

1. 加入MongoDB
从dockerHub下载镜像
docker pull mongo:3.6.5
3.6.5是版本号，版本号可以从官网找：https://hub.docker.com/r/library/mongo/

2. docker启动MongoDB，有多种启动方法
//-p 指定端口映射规则，这样在外部可以通过docker主机IP访问mongo
//-i 是否使用交互式命令行（例如在容器启动时，执行shell脚本）
//-t 表示启用伪终端（TTY）
//-d 表示容器在后台运行，其实加不加没关系，如果不加-d会有输出打印可以看，并且会停留在那个容器的bash终端内
//-v 创建一个卷并绑定挂载点（类似目录映射，实现host和container文件共享）
docker run -p <主机端口>:<容器端口> -td <镜像ID或镜像名>
2.1
docker run -p 27017:27017 -td mongo    // 如果不指定版本，会运行最新的镜像
docker run -p 27017:27017 -td mongo:3.6.5
2.2
创建本地数据文件夹
mkdir /data/mongodb0
docker run --name mongodb-server0 -v /data/mongodb0:/data/db -p 27017:27017 -d 镜像ID --auth
--name mongodb-server0是别名
2.3
-v $PWD/db:/data/db :将主机中当前目录下的db挂载到容器的/data/db，作为mongo数据存储目录
docker run -p 27017:27017 -v $PWD/db:/data/db -d mongo:3.6.5

以上那些命令都会默认启动mongod服务，
docker run --name mongodb_zqregi -p 27017:27017 -td mongo:3.6.5  //启动mongod服务
docker run --name mongodb_zqregi -p 27017:27017 -td mongo:3.6.5 bash  //不会启动mongod服务

最终选择，启动mongod服务加验证信息
docker run --name mongodb_zqregi -p 27017:27017 -td mongo:3.6.5 --auth 


3. 
3.1
docker exec -it <容器名或ID> <命令行命令> <参数>
例如，通过docker进入mongo的shell：
docker exec -it e6f0fa1cc31f mongo
docker exec -it mongodb_zqregi mongo 

这个docker exec可以用 exit退出

3.2
也可以进入mongoDB的容器的终端：
docker exec -it mongodb_zqregi bash
此时已经进入容器了，再执行命令启用mongod服务，这里加上了VirtualBox的IP地址：
mkdir mongodb0
mongod --dbpath ./mongodb0 --bind_ip 192.168.99.100

打开另一个Docker Quickstart Terminal：
docker exec -it mongodb_zqregi bash
此时已经进入容器了，再执行命令连接mongod服务：
mongo


4. show dbs  // 命令看到有admin数据库
admin   0.000GB
接着创建 admin数据库超级用户：
use admin
db.createUser({user:'root',pwd:'123456',roles:[{ "role" : "root", "db" : "admin" }]})
验证
db.auth('root','123456')

创建 数据库用户：
use zqregi
db.createUser({user:'zquser1',pwd:'zq123456',roles:[{ "role" : "readWrite", "db" : "zqregi" }]})
验证
db.auth('zquser1','zq123456')

-------------------

无验证实测：
application.properties
spring.data.mongodb.uri=mongodb://192.168.99.100:27017/zqregi
docker run --name mongodb_zqregi -p 27017:27017 -td mongo:3.6.5
访问ip：192.168.99.100 可以执行注册功能
执行命令，查看数据库
docker exec -it mongodb_zqregi mongo



Windows下最终选择方案, 加验证的服务，假设已经安装好了镜像
注意，不同设备下，IP地址可能不同，192.168.99.100：
SpringBoot后端application.properties：
spring.data.mongodb.uri=mongodb://zquser1:zq123456@localhost:27017/zqregi

Docker Quickstart Terminal终端下：
docker run --name mongodb_zqregi -p 27017:27017 -td mongo:3.6.5 --auth

加admin参数进入MongoDB控制台，创建超级用户
docker exec -it mongodb_zqregi mongo admin
use admin
db.createUser({user:'zqroot',pwd:'zq852637',roles:[{ "role" : "root", "db" : "admin" }]})

cmd终端下，连接、验证管理员账号密码、创建普通用户：
mongo 192.168.99.100:27017
use admin
db.auth('zqroot','zq852637')
接着创建zqregi数据库的用户：
use zqregi
db.createUser({user:'zquser1',pwd:'zq123456',roles:[{ "role" : "readWrite", "db" : "zqregi" }]})

最后跑起 web镜像
docker run -p 8080:8080 -t springio/carregi
带环境变量参数，配合web里面的spring.data.mongodb.uri
docker run -p 8080:8080 -t -e MONGODB_USER=zquser1,mongodb_pwd=zq123456,mongodb_host=192.168.99.100,MONGODB_PORT=27017,MONGODB_DB=zqregi 2881486114/carregi:1.0.1

docker run -p 8080:8080 -t -e ZR_USER=zquser1 -e ZR_PW=zq123456 -e ZR_HOST=192.168.99.100 -e ZR_PORT=27017 -e ZR_DB=zqregi 2881486114/carregi:1.0.1




------------------------------------------------------
其他概念：

通常意义上的三层架构就是将整个业务应用划分为：
表现层（UI）、业务逻辑层（BLL）、数据访问层（DAL）
1. 显示层负责界面展示，接收请求，分发请求，
2. 业务层完成运算逻辑，
3. 持久层完成数据库的读写
4. 业务层粘合显示层与持久层，显示层调用业务层，业务层调用持久层

MVC是 Model-View-Controller，这三个加起来以后才是三层架构中的UI层，
MVC把三层架构中的UI层再度进行了分化，分成了控制器、视图、实体三个部分。

控制器与三层中的BLL进行对话。
个人理解， Model就是与数据库表对应的映射JavaBean，View就是界面，Controller就是界面逻辑。


DAO是一种设计模式，用来实现持久层。持久层框架Hibernate就可以实现DAO。
DAO（data access object）数据访问对象，
实现了DAO之后，外部人员不需要和数据库交互，不需要知道数据库的表的结构，
而是通过DAO接口对数据进行操作（增删改查）

持久层封装了JDBC。
JDBC是直接操作数据库的java代码。

POJO（Plain Ordinary Java Object）简单的Java对象，实际就是普通JavaBeans。
贫血的业务对象POJO，业务对象用POJO表示，这些POJO只有属性，没有方法，因此称为贫血的领域对象。


------------------------------------------------------

SpringBoot&Java 和 操作系统(Windows&Linux) 的classpath是不一样的概念。

SpringBoot&Java中，classpath
首先 classpath是指编译过后的的classes目录
对于maven的所有项目, 配置文件一般放在resources目录下, 当编译之后会自动复制到classes目录下
也就是说，项目中的application.properties,banner.txt等等这些，当编译之后都会 被复制到 项目根目录/target/classes 下。

非maven的所有项目, 一般放在src目录下, 编译之后也会自动复制到classes目录下面.
所有的web-app项目, 例如web.xml, spring的配置文件等等,是放在webapp/WEB-INF下面的,
如果想要引用resources或者src目录下的配置文件, 就在在配置文件的路径前加上classpath。
 
例如下面注解，其实就是加载 项目根目录/resources/application.properties ：
@PropertySource(value = {"classpath:application.properties"},encoding="utf-8")


------------------------------------------------------

多线程高并发，数据正确性

数据不一致的原因和影响：
脏数据：
脏读就是指当一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到数据库中，
这时，另外一个事务也访问这个数据，然后使用了这个数据。
因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是脏数据(Dirty Data)，
依据脏数据所做的操作可能是不正确的。
读"脏"数据是指事务T1修改某一数据,并将其写回磁盘,事务T2读取同一数据后,T1由于某种原因被撤消,
这时T1已修改过的数据恢复原值,T2读到的数据就与数据库中的数据不一致,则T2读到的数据就为"脏"数据,即不正确的数据.

不可重复读
指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。
那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的数据可能是不一样的。
这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。

丢失修改
两个事务T1和T2读入同一个数据并修改，T2提交的结果破坏了T1提交的结果，导致了T1的修改被丢失。
典型例子：买飞机票或者火车票的例子。

线程安全
线程安全是多线程编程时的计算机程序代码中的一个概念。
在拥有共享数据的多条线程并行执行的程序中，
线程安全的代码会通过同步机制保证各个线程都可以正常且正确的执行，不会出现数据污染等意外情况。

如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。
如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。
或者说:一个类或者程序所提供的接口对于线程来说是原子操作或者多个线程之间的切换不会导致该接口的执行结果存在二义性,
也就是说我们不用考虑同步的问题。
线程安全问题都是由全局变量及静态变量引起的。
若每个线程中对全局变量、静态变量只有读操作，而无写操作，一般来说，这个全局变量是线程安全的；
若有多个线程同时执行写操作，一般都需要考虑线程同步，否则的话就可能影响线程安全。



