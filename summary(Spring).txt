Spring

Spring框架，两个重要功能的容器
控制反转(IOC)
面向切面(AOP)

Spring是一个用来 整合其他框架 的框架，不只是用来开发web(java EE)，还可以开发其他程序。

IOC:(全称:Inverse Of Control )控制反转，容器主动将资源推送给它所管理的组件，组件所做的是选择一种合理的方式接受资源。
简单的理解：把创建对象和维护之间的关系的权利由程序中转移到Spring容器的配置文件中。
DI:(全称:Dependency Injection)依赖注入，IOC的另一种表现方式，组件以一种预先定义好的方式来接受容器注入的资源。
IOC即DI


-----------------------------------------

SpringMVC只是 web开发中框架，
Spring中集合了 静态图片和html以及其他前端开发文件、SpringMVC 、持久层框架(JPA、Mybatis)就可以进行web开发了。

-----------------------------------------

SpringBoot是在Spring的基础上发展而来，也不只是开发web，也可以开发其他应用。
SpringBoot中也是有IOC，AOP的，可以非常快速的引入各种框架。
相比起Spring，SpringBoot 约定大约配置，大量的减少了配置文件的使用。



-----------------------------------------

Spring 注解解析

Annotation(注解):
从JDK 1.5开始, Java增加了对元数据(MetaData)的支持，也就是 Annotation(注解)。
注解其实就是代码里的特殊标记，它用于替代配置文件：传统方式通过配置文件告诉类如何运行，有了注解技术后，
开发人员可以通过注解告诉类如何运行。在Java技术里注解的典型应用是：可以通过反射技术去得到类里面的注解，以决定怎么去运行类。
注解可以标记在包、类、属性、方法，方法参数以及局部变量上，且同一个地方可以同时标记多个注解。
例如：
// 抑制编译期的未指定泛型、未使用和过时警告
@SuppressWarnings({ "rawtypes", "unused", "deprecation" })
// 重写
@Override

meta-annotation（元注解）:
除了直接使用JDK 定义好的注解，还可以自定义注解，
在JDK 1.5中提供了4个标准的用来对注解类型进行注解的注解类，我们称之为 meta-annotation（元注解），他们分别是：
@Target   @Retention   @Documented   @Inherited
使用这4个元注解来对自定义的注解类型进行注解

@Target注解：描述注解的使用范围
@Retention注解：描述注解保留的时间范围
@Documented注解：描述在使用 javadoc 工具为类生成帮助文档时是否要保留其注解信息。
@Inherited注解：使被它修饰的注解具有继承性

----------------------------------------------

@Controller 、@RestController
1. 根据@RestController的注释，@RestController是@Controller和@ResponseBody的结合体
2. 在@RestController如果想要返回temlpate(模板)只能使用ModelAndView；在@Controller可以直接返回字符串，会自动加载模板。
3. 如果只是使用@RestController注解Controller，则Controller中的方法无法返回jsp页面，配置的视图解析器InternalResourceViewResolver不起作用，
返回的内容就是return里的内容。（等同于用@RestController注解的controller中的请求都是异步进行的）
4. 在使用@Controller注解controller时，如果需要返回JSON，XML或自定义mediaType内容到页面，则需要在对应的方法上加上@ResponseBody注解

----------------------------------------------


@SpringBootApplication的几个重要注解：

@SpringBootConfiguration
继承@Configuration注解，这个我们就是为了加载配置文件用的
这个注解的作用与@Configuration作用相同，都是用来声明当前类是一个配置类．可以通过＠Bean注解生成IOC容器管理的bean
从Spring3.0，@Configuration用于定义配置类，可替换xml配置文件，被注解的类内部包含有一个或多个被@Bean注解的方法，
这些方法将会被AnnotationConfigApplicationContext或AnnotationConfigWebApplicationContext类进行扫描，并用于构建bean定义，初始化Spring容器。

@ComponentScan
组件扫描和自动装配
spring里有四大注解：@Service,@Repository,@Component,@Controller用来定义一个bean.
@ComponentScan注解就是用来自动扫描被这些注解标识的类，最终生成ioc容器里的bean．
可以通过设置@ComponentScan　basePackages，includeFilters，excludeFilters
属性来动态确定自动扫描范围，类型已经不扫描的类型．默认情况下:它扫描所有类型，
并且扫描范围是@ComponentScan注解所在配置类包及子包的类
使用@SpringBootApplication注解，就说明你使用了@ComponentScan的默认配置，
这就建议你把使用@SpringBootApplication注解的类放置在root package(官方表述)下，
其他类都置在root package的子包里面，这样bean就不会被漏扫描

@EnableAutoConfiguration
@Import(EnableAutoConfigurationImportSelector.class)，借助EnableAutoConfigurationImportSelector，
@EnableAutoConfiguration可以帮助SpringBoot应用将所有符合条件的@Configuration配置都加载到当前SpringBoot创建并使用的IoC容器。

----------------------------------------------

@Component
@Component在类级别使用，使类成为一个组件。这些类可通过类路径扫描进行自动检测。在java配置中，@ComponentScan用于自动检测组件，在spring应用程序上下文XML中，component-scan标记用于通过类路径进行自动检测。@Component具有一个值属性，它是一个组件名称，它也将被视为spring bean名称。

@Service
@Service用于服务类注解。服务类可以充当j2EE模式的业务服务外观。服务类使用DAO，实体类等实现业务逻辑。@Service通过类路径扫描自动检测。对类进行注解@Service给出了逻辑意义，即这些类是服务。如果我们用@Component在服务类而不是@Service不会有任何问题，但是为了更好的可读性，则应该使用@Service注解服务类。@Service可理解为@Component的一个特例。

@Repository
@Repository用于持久层注解，应使用@Repository注解对这些类型的类进行注解，以通过类路径扫描进行自动检测。应使用@Repository注解对DAO类进行注解以进行自动检测。@Repository可理解为@Component的一个特例。

@Controller
@Controller在spring MVC的类级别使用。它表示该类是Web控制器。@Controller通过类路径扫描自动检测这些带注解的类。@Controller注解通常与@RequestMappingspring MVC中的注解结合使用。

spring 2.5 中除了提供 @Component 注释外，还定义了几个拥有特殊语义的注释，它们分别是：@Repository、@Service 和 @Controller。在目前的 Spring 版本中，这 3 个注释和 @Component 是等效的，但是从注释类的命名上，很容易看出这 3 个注释分别和持久层、业务层和控制层（Web 层）相对应。虽然目前这 3 个注释和 @Component 相比没有什么新意，但 Spring 将在以后的版本中为它们添加特殊的功能。所以，如果Web 应用程序采用了经典的三层分层结构的话，最好在持久层、业务层和控制层分别采用@Repository、@Service 和 @Controller 对分层中的类进行注释，而用 @Component 对那些比较中立的类进行注释。 

在applicationContext.xml文件中加一行：
<context:component-scan base-package="com.xxx.xxx"/> 
加上这一行以后，将自动扫描路径下面的包，如果一个类带了@Service注解，将自动注册到Spring容器，
不需要再在applicationContext.xml文件定义bean了，类似的还包括@Component、@Repository、@Controller。


































































































