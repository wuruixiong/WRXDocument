public
protected
private
abstract
static
final
transient
volatile
synchronized
native
strictfp


int	4个字节 
char	2个字节
byte	1个字节,字节英文就是byte,1B=8位/8比特/8bit
short	2个字节
long	8个字节
float	4个字节
double	8个字节
关于boolean占几个字节，众说纷纭，虽然boolean表现出非0即1的“位”特性，但是存储空间的基本计量单位是字节，不是位。所以boolean至少占一个字节。 
JVM规范中，boolean变量作为int处理，也就是4字节；boolean数组当做byte数组处理。

String，一个英文字符占1个字节。中文字符根据编码，UTF-8编码：中文字符3个字节；GBK编码：中文字符占2个字节。


两位16进制的数就是一个字节（8位）组成。
一个字节8位，就是2的8次方，两位16进制也是2的8次方。1位16进制数是0到F，同等于4位2进制数0000到1111
两位16进制数从00开始(最小值)到FF为止(最大值)，同等于8位2进制数00000000到11111111


内存分配基础
Java把内存分成两种，一种叫做栈内存，一种叫做堆内存
在函数中定义的一些基本类型的变量和对象的引用变量都是在函数的栈内存中分配。当在一段代码块中定义一个变量时，java就在栈中为这个变量分配内存空间，当超过变量的作用域后，java会自动释放掉为该变量分配的内存空间，该内存空间可以立刻被另作他用。
堆内存用于存放由new创建的对象和数组。在堆中分配的内存，由java虚拟机自动垃圾回收器来管理。在堆中产生了一个数组或者对象后，还可以在栈中定义一个特殊的变量，这个变量的取值等于数组或者对象在堆内存中的首地址，在栈中的这个特殊的变量就变成了数组或者对象的引用变量，以后就可以在程序中使用栈内存中的引用变量来访问堆中的数组或者对象，引用变量相当于为数组或者对象起的一个别名，或者代号。
从堆和栈的功能和作用来通俗的比较,堆主要用来存放对象的，栈主要是用来执行程序的.而这种不同又主要是由于堆和栈的特点决定的: 




黄金比例：(√5-1)/2  约等于 0.618， 约等于6:10，约等于5:8

冲印尺寸(英寸)    	文件体积(约) 	要求最低分辨率   	相片对应尺寸
(1寸 / 2寸)      	150-200KB     	640x480(30万)    	2.5 × 3.5 cm  / 5.3 × 3.5cm 
(5×3.5英寸)3R    	500-550KB    	1280x960(120万)   	12.70×8.89  cm
(6×4英寸)  4R    	600-650KB    	1280x1024(130万)  	15.24×10.16 cm
(7×5英寸)  5R    	800-900KB    	1600x1200(200万)  	17.78×12.70 cm
(8×6英寸)  6R    	1-1.2MB      	1900x1280(240万)  	20.32×15.24 cm
(10×8英寸) 8R-8F 	1.3-1.5MB    	2048x1536(300万)  	25.40×20.32 cm

注：一般默认一个像素3字节(RGB颜色模式)，即3B



访问控制符(access specifier):public private protected


------------------------------------------------------------


JVM：JVM有自己完善的硬件架构，如处理器、堆栈（Stack）、寄存器等，还具有相应的指令系统（字节码就是一种指令格式）。JVM屏蔽了与具体操作系统平台相关的信息，使得Java程序只需要生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。JVM是Java平台无关的基础。JVM负责运行字节码：JVM把每一条要执行的字节码交给解释器，翻译成对应的机器码，然后由解释器执行。JVM解释执行字节码文件就是JVM操作Java解释器进行解释执行字节码文件的过程。

Java编译器：将Java源文件（.java文件）编译成字节码文件（.class文件，是特殊的二进制文件，二进制字节码文件），这种字节码就是JVM的“机器语言”。javac.exe可以简单看成是Java编译器。

Java解释器：是JVM的一部分。Java解释器用来解释执行Java编译器编译后的程序。java.exe可以简单看成是Java解释器。

注意：通常情况下，一个平台上的二进制可执行文件不能在其他平台上工作，因为此可执行文件包含了对目标处理器的机器语言。而Class文件这种特殊的二进制文件，是可以运行在任何支持Java虚拟机的硬件平台和操作系统上的！

 

维基百科定义：

JVM：一种能够运行Java字节码（Java bytecode）的虚拟机。

字节码：字节码是已经经过编译，但与特定机器码无关，需要解释器转译后才能成为机器码的中间代码。

Java字节码：是Java虚拟机执行的一种指令格式。

解释器：是一种电脑程序，能够把高级编程语言一行一行直接翻译运行。解释器不会一次把整个程序翻译出来，只像一位“中间人”，每次运行程序时都要先转成另一种语言再作运行，因此解释器的程序运行速度比较缓慢。它每翻译一行程序叙述就立刻运行，然后再翻译下一行，再运行，如此不停地进行下去。它会先将源码翻译成另一种语言，以供多次运行而无需再经编译。其制成品无需依赖编译器而运行，程序运行速度比较快。

即时编译(Just-in-time compilation: JIT)：又叫实时编译、及时编译。是指一种在运行时期把字节码编译成原生机器码的技术，一句一句翻译源代码，但是会将翻译过的代码缓存起来以降低性能耗损。这项技术是被用来改善虚拟机的性能的。

JIT编译器是JRE的一部分。原本的Java程序都是要经过解释执行的，其执行速度肯定比可执行的二进制字节码程序慢。为了提高执行速度，引入了JIT。在运行时，JIT会把翻译过来的机器码保存起来，以备下次使用。而如果JIT对每条字节码都进行编译，则会负担过重，所以，JIT只会对经常执行的字节码进行编译，如循环，高频度使用的方法等。它会以整个方法为单位，一次性将整个方法的字节码编译为本地机器码，然后直接运行编译后的机器码。

二进制文件：广义的二进制文件即为文件，由文件在外部存储设备的存放方式为二进制而得名。狭义的二进制文件即指除文本文件以外的文件。文本文件的格式包括：ASCII、MIME、txt。

------------------------------------------------------------

InputStream指的是在数据流中的数据读入到指定object是为Input，通常使用InputStream.read
OutputStream指的是将数据输出到OutputStream中，是为Output，通常使用OutputStream.write

------------------------------------------------------------

float浮点类型，只有在数值后面加f就是浮点数值，例如0.5f

Integer.MAX_VALUE
整型最大值

long是长整型，也就是说拿两个long去做除法，拿到的不会是浮点型
------------------------------------------------------------

java三目运算：
a ? b:c
a为真返回b，为假返回c
------------------------------------------------------------

new A() 是为匿名对象

------------------------------------------------------------

一个方法在 方法体内调用自身 是为 递归调用

------------------------------------------------------------

相等判断

Java中判断两个变量是否相等有两种方式：
1. ==
2. equals

如果变量是基本类型，那么使用==和使用equals会得到相同的结果，都是判断变量的值是否相对。

如果变量是引用类型，==运算符判断变量是否指向同一引用对象，equals判断变量"值"是否相等。

对象也可以利用==运算符进行值判断，只有当Java值类型对应的包装类（Boolean、Byte、Short、Integer、Long、Float、Double、Charcater）

------------------------------------------------------------

Java的注解和反射原理 以及 JNI

------------------------------------------------------------

1，**重点内容**sqrt是开方： 
比如math.sqrt(9)结果为3 意思是求9的开方根，数学上称为根号2下的9 
2.**重点内容**pow（a,b） 
Math.pow(27, 3)意思是求27的三次方 就是27*27*27的意思 
重点内容假如你想求开三次方，或者四次方 可以借助pow方法 
例如：Math.pow(27, 1/3) 
结果为3 就是对27的1/3次方 就是根号3下的27

------------------------------------------------------------

三角函数公式使用，Math.PI为圆周率，1度为π/180弧度
Math.sin((30) * Math.PI / 180) = 0.49999999 //sin30度，约等于0.5
Math.sin(30) 是指sin30弧度
Math.asin(0.49999999)可以得到反sin的数值：0.52359877(这就是30度的值：30*Math.PI/180 == 0.52359877)
Math.asin(0.49999999)*180/Math.PI = 30   //也可以使用toDegrees()来得到角度，toDegrees()也是使用了 数值乘以180再除以圆周率的计算公式的
------------------------------------------------------------
java整型的与、或、非、异或运算：
计算之前将10进制转为2进制，对每位进行运算
例如：1与2就是2进制的：1与10结果为0
129-->10000001
128-->10000000
128|129 -->10000001 结果129
异或就是相同为真不相同为假，1和1、0和0异或都为真
------------------------------------------------------------
继承的父类的子类可以重写public，protected方法，必须是只有public，protected修饰符的方法，
如果方法加了static，final等修饰符不可被重写

------------------------------------------------------------
整型没初始化值为0
字符串没有初始化值为null, 因为 字符串 String 是一个类
即：
    String mText;//值为0
    int mInt;	 //值为null
------------------------------------------------------------

针对二进制和字节的运算，位运算：&  |  ~  ^  >>  <<  >>>

整型是4个字节32位，8就是000...0001000（1000前面还有28个0），9就是000...0001001（1001前面还有28个0）

& 与运算符，当且仅当两个对应的位置都是1，结果才是1，否则结果为0
8&9  1000&1001  结果1000 即 8

| 或运算符，当且仅当两个对应的位置都是0，结果才是0，否则结果是1，
那么8|9就是1000|1001 即1001 即9

~ 非运算符，取反

^ 异或运算符

<< 左侧位移，表示这个数乘以2的n次方， 符号位不变，低位补0，溢出截断

>> 右侧位移，表示除以这个数的n次方，低位溢出，符号位不变，并用符号位补溢出的高位。

<<< 无符号右移运算符。低位溢出，高位补0



------------------------------------------------------------

可以使用Thread.currentThread().getId()或者
Thread.currentThread().getName()来确定当前线程，

如果是主线程的话，getName()拿到的是 "main"之类的表示主线程的字段

------------------------------------------------------------
字符串操作：
StringClip.isEmpty();  // 判断为空
StringClip.length() ; //长度
StringClip.equals(new String); //比较是否相等

字符串和char数组互转
String str = "ggg";
char[] bm;
bm = str.toCharArray();
str = String.valueOf(bm);


浮点除法运算，加(float)强转是关键
float wratio = (float)mViewWidth / mBackgroundBitmap.getWidth();
int转float
Math.round(mBackgroundBitmap.getHeight() * wratio))


对数运算，
n=loga(b), 其中，a叫做“底数”，b叫做“真数”，n叫做“以a为底的b的对数”。
零和负数没有对数。当不写底数时，一般默认以10为底数

java的Math.log运算是以自然数e为底数
(常数e为底数的对数叫做自然对数)
(自然常数e,约为2.71828)

例如 进行以2为底(base)的对数运算，可以这么写
logb(n)=loge(n)/loge(b)  (换底公式)
Math.log(8)/Math.log(2)=3.0


//Double转int
Double d = 10d;
int mBorderRadius = d.intValue();


实例化数组： String res_randomstr[?];//问号是表示创建几个元素，
	    res_randomstr=new String[10];//例如：下标为res_randomstr[0]到res_randomstr[9]共10个
		
数组定义： 1.private String[] text = {"t", "t", "t"}; //可以在类之内方法之外如此定义，数组text会有3个元素   

		   2.private String[] text;			     //此时text数组为空
		     text = new String[]{"t", "t", "t"}; //在方法之内 实例化, text数组有三个元素  
			 
		   3.private String[] text;	// 定义数组text, 此时text数组为空
		     text = new String[2];  //也可以在方法之内实例化, text数组有三个元素, 但是三个元素都为空 
			 text[0] = "t"			// 对第一个元素赋值


数组长度：int grid_id[][];
	grid_id.length//有几个数据就有几个,即第一维的长度
二维数组元素长度:   grid_id[].length
输出2维数组所有数据：     
           for(int i=0;i<grid_id.length;i++)
                {
                    for(int j=0;j<grid_id[i].length;j++) {
                        Log.v(String.valueOf(grid_id[i][j]),String.valueOf(grid_id[i][j]));
                    }
                }
				
------------------------------------------------------------------------------
在线程的使用过程中，要特别注意线程同步的问题，
例如：在线程中遍历列表list，如果其他线程对列表list进行 删除操作，则可能出现 下标溢出、空指针等错误
方法1：如果列表list在主线程创建，则在主线程中复制多个列表list，再作为参数赋给各个线程

方法2：使用线程同步synchronized锁住list，在使用到list的地方都将list使用synchronized锁住

方法3：使用线程同步synchronized锁住方法，封装list，将list用另外的类A 封装，在该类A的实例化对象中对list操作，
	   其他线程通过操作类A的实例化对象来对list操作， 在类A中的操作list的方法method前加入synchronized，将操作list的方法锁住，
	   可以防止多个线程同时操作该方法，这样也就是对list操作实现了线程同步

	   
------------------------------------------------------------------------------

实例化表： ArrayList list;
list=new ArrayList();
增加操作：add（n）；从0开始加入
删除操作：remove（n）
取出操作：get（n）；从0开始取出例如：get（0），get（1），get（2）
计算长度：list.size();有几个数据就有几个，如果add3次，list.size（）就是3
表中的元素转换int类型：Integer.valueOf(String.valueOf(list.get(n))).intValue();
表中的元素转换String类型：String.valueOf(list.get(n));
	   

生成随机数： Random r = new Random();
	     r.nextInt(9);//生成从0到8
	   r.nextInt(n);//生成从0到n-1
	   

创建线程：  
  private class Mythread extends Thread
    {
        int scount;
        int slevel;
//构造方法
        private Mythread(int count,int level)
        {
           scount=count;
            slevel=level;
        }
//重写run方法
        @Override
        public void run(){
            
        }
    }

最后：Mythread实例化之后.start

创建线程2
       //实例化借口
　　class MutliThread implements Runnable{
      @Override
　　public void run(){}
　　}
      MutliThread m3=new MutliThread();
      Thread t1=new Thread(m1);
      t1.start；
	   

Math.max(13,90)//返回90
Math.min(13,90)//返回13
	   

return 跳出有返回值的方法       
        return ;//可以退出void方法
break 跳出当前循环，如果在switch中，碰到break，会退出switch
	   
	   
JSON的2种格式：
1、对象：对象在js中表示为“{}”括起来的内容，数据结构为 {key：value,key：value,...}的键值对的结构，在面向对象的语言中，key为对象的属性，value为对应的属性值，所以很容易理解，取值方法为 对象.key 获取属性值，这个属性值的类型可以是 数字、字符串、数组、对象几种。
2、数组：数组在js中是中括号“[]”括起来的内容，数据结构为 ["java","javascript","vb",...]，取值方式和所有语言中一样，使用索引获取，字段值的类型可以是 数字、字符串、数组、对象几种。
	 表示数组的格式需要注意：一般情况下都是这么表示数组的：
	 {"sites":[ "Google", "Runoob", "Taobao" ]}   在中括号之前再加一个键对值再用大括号包裹

JSON解析
封装并存储成文件：
            JSONObject object = new JSONObject();
            try {
                object.put("Common1", "#ffffffff");
                object.put("Common2", "#ffffffff");
                object.put("Common3", "#ffffffff");
                object.put("Common4", "#ffffffff");
                object.put("Common5", "#ffffffff");
                object.put("Common6", "#ffffffff");
                object.put("Common7", "#ffffffff");
                object.put("Common8", "#ffffffff");
                object.put("Common9", "#ffffffff");
                object.put("Common10", "#ffffffff");
            } catch (JSONException e) {
                e.printStackTrace();
            }

            try {
                OutputStream os = context.openFileOutput(FileName, Activity.MODE_PRIVATE);
                os.write(object.toString().getBytes());
                os.close();
                Log.w(FileName+" is create",FileName+" is create");
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

读取JSON文件
            try {
                FileInputStream fis =context.openFileInput(FileName);
                byte[] buff=new byte[1024];
                int hasRead=0;
                StringBuilder sd=new StringBuilder("");
                while ((hasRead=fis.read(buff))>0)
                {
                    sd.append(new String(buff,0,hasRead));
                }
                fis.close();
//                Log.w("JSON",sd.toString());
                return sd.toString();
            }
            catch (Exception e)
            {
            }

将上面的返回值（字符串型）转成JSONTokener ，使用JSONObject 查找数据，sd.toString()就是JSON的数据格式
        try {
            JSONTokener jsonTokener = new JSONTokener(sd.toString());
            JSONObject jsonObject = (JSONObject) jsonTokener.nextValue();
            jsonObject.getString("Common"+CommonNumber);
        } catch (JSONException ex) {
        }
		
		
JSON数组封装：
JSONObject person = new JSONObject();  
JSONArray phone = new JSONArray();  
phone.put("12345678").put("87654321");  
person.put("phone", phone); 

JSON数组读取：
String t={"initial":"R","name":"reiz","likes":["JavaScript","Skiing","Apple Pie"]}
JSONObject.fromObject(t)
JSONArray likes=jo.getJSONArray("likes"); //得到likes数组
like.getString(2);                        //得到likes数组第三个
	   
	   
反射机制：
方法无参数：
	获取方法：
	Class iInputMethodWrapper = service.getClass();
	try {
		Method getInternalInputMethod = iInputMethodWrapper.getMethod("getInternalInputMethod",null);
	} catch (Exception e) {
		e.printStackTrace();
	}
	
	 执行方法：
	 getInternalInputMethod.invoke("iInputMethodWrapper",null)
	   

	   
"abc|asd|amsd".split("|")
输出结果是String[6]{"","adc","|","asd","|","amsd"}
"abc|asd|amsd".split("\\|")
输出结果是String[3]{"adc","asd","amsd"}
如果使用split，发现输出结果有问题，尝试加入转义符:\\
	   
	   


// 定义 三种 TYPE，
@IntDef({DATA_TYPE_1, DATA_TYPE_2, DATA_TYPE_3})
@Retention(RetentionPolicy.SOURCE)
public @interface Type {}

public static final int DATA_TYPE_1 = 1;
public static final int DATA_TYPE_2 = 2;
public static final int DATA_TYPE_3 = 3;

// 在调用 setType()时，会有提示输入参数可以是 DATA_TYPE_1, DATA_TYPE_2, DATA_TYPE_3
public setType(@Type int type) {
	int i = type;
}
	   
	   


// 使用 迭代器Iterator，进行 列表list的循环中的删除元素操作
List<String> names = ....
Iterator<String> i = names.iterator();
while (i.hasNext()) {
   String s = i.next(); // must be called before you can call i.remove()
   // Do something
   i.remove();
}	   


// 表情code 转为字符串: Integer.toHexString(Character.codePointAt("\uD83D\uDE01", 0)) == 1f601
String code = "\uD83D\uDE00";
String output = "\"";
for (char c : code.toCharArray()) {
	output = output + "\\u" + Integer.toHexString(c);
}
output = output + "\"";

Character.codePointAt("\uD83D\uDE01", 0)  ==  128513
Integer.toHexString(128513)  ==  1f601
Unicode:U+1F601

// 字符串 转为 表情code: String.valueOf(Character.toChars(Long.parseLong("1f601", 16))) == \uD83D\uDE00
 Long.parseLong("1f601", 16) == 128513
 Character.toChars(128513) == char[2] codeChar
 codeChar[0] == \uD83D
 codeChar[1] == \uDE00
 code = String.valueOf(codeChar) == \uD83D\uDE00



每个类都会自带一个无参数的构造方法
如果一个类创建一个带参数的构造方法，那么他的子类如果重写该类的带参数构造方法，那么必须在该构造方法的第一行调用该构造方法的super

子类继承父类，一定会调用父类的构造方法，如果没有在代码中写出super调用，那么会调用父类的无参数的构造方法
如果用super指定了其他父类带参数的构造方法，那么不会调用无参数的构造方法


不可以 存在2个方法 同名，参数类型和数量完全相同，只有返回值不同



将一段字符串经过加密之后，转为另外一段字符串，
适用于一段uri，经过加密之后，生成文件名字符串
public static String getFileName (String uri) {
	String fileName = null;
	try {
		// SHA-256 加密
		MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
		// string 转为UTF-8格式的字节数组
		messageDigest.update(uri.getBytes("UTF-8"));
		fileName = bytesToHex(messageDigest.digest(), new char[64]);
	} catch (Exception e) {
	} finally {
		return fileName;
	}
}
private static final char[] HEX_CHAR_ARRAY = "0123456789abcdef".toCharArray();
private static String bytesToHex(byte[] bytes, char[] hexChars) {
	int v;
	for (int j = 0; j < bytes.length; j++) {
		v = bytes[j] & 0xFF;
		hexChars[j * 2] = HEX_CHAR_ARRAY[v >>> 4];
		hexChars[j * 2 + 1] = HEX_CHAR_ARRAY[v & 0x0F];
	}
	return new String(hexChars);
}


------------------------------------------------------------------------------


Java 正则表达式
正则表达式定义了字符串的模式。
正则表达式可以用来搜索、编辑或处理文本。
正则表达式并不仅限于某一种语言，但是在每种语言中有细微的差别。

正则表达式的两个类：
Pattern 类：
pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。
要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。
Matcher 类：
Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。
你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。

-----------------
规则：
.  	表示所有的字符，所有的单个字符
?	前面的零 (0) 或一 (1) 个字符或数字，X? X没有出现或者只出现一次
*	前面的零 (0) 或更多个字符或数字，X* X出现0次或更多
+	前面的一 (1) 或更多个字符或数字，X+ X出现1次或更多

^xxx  在开头匹配正则xxx，一般写在开头，没什么用，有写没写效果一致
xxx$  在结尾匹配正则xxx，一般写在末尾，没什么用，有写没写效果一致
^还表示反义，必须在括号内使用
[a-z]字符范围。匹配指定范围内的任何字符。例如，"[a-z]"匹配"a"到"z"范围内的任何小写字母。
x|y 匹配 x 或 y。例如，'z|food' 匹配"z"或"food"。'(z|f)ood' 匹配"zood"或"food"

圆括号()是组，主要应用在限制多选结构的范围/分组/捕获文本/环视/特殊模式处理
1、(abc|bcd|cde)，表示这一段是abc、bcd、cde三者之一均可，顺序也必须一致
2、(abc)?，表示这一组要么一起出现，要么不出现，出现则按此组内的顺序出现
3、(?:abc)表示找到这样abc这样一组，但不记录，不保存到$变量中，否则可以通过$x取第几个括号所匹配到的项，比如：(aaa)(bbb)(ccc)(?:ddd)(eee)，可以用$1获取(aaa)匹配到的内容，而$3则获取到了(ccc)匹配到的内容，而$4则获取的是由(eee)匹配到的内容，因为前一对括号没有保存变量
4、a(?=bbb) 顺序环视 表示a后面必须紧跟3个连续的b
5、(?i:xxxx) 不区分大小写 (?s:.*) 跨行匹配.可以匹配回车符

方括号是单个匹配，字符集/排除字符集/命名字符集
1、[0-3]，表示找到这一个位置上的字符只能是0到3这四个数字，与(abc|bcd|cde)的作用比较类似，但圆括号可以匹配多个连续的字符，而一对方括号只能匹配单个字符
2、[^0-3]，表示找到这一个位置上的字符只能是除了0到3之外的所有字符
3、[:digit:] 0-9 [:alnum:] A-Za-z0-9

-----------------

规则2：

.*表示 任意长度的所有字符，看实例1/2

\d  任意数字，等同于[0-9],表达式要写 \\d。实例3
Matcher.find()方法是搜索(部分匹配)，是查找输入串中与模式匹配的子串，如果该匹配的串有组还可以使用group()函数。实例3
Matcher.matches()是全部匹配，是将整个输入串与模式匹配，如果要验证一个输入的数据是否为数字类型或其他类型，一般要用matches()。实例3




-----------------

实例：

实例1：
 Pattern pattern = Pattern.compile("Java.*");
 Matcher matcher = pattern.matcher("Java不是人");
 boolean b= matcher.matches(); // 这里返回true


实例2.1：
Pattern p = Pattern.compile(".*runoob.*");
Matcher m = p.matcher("I am noob from runoob.com.");
boolean isMatch = m.matches();  // 这里返回true
实例2.2：
Pattern p = Pattern.compile(".*runoob.*");
Matcher m = p.matcher("I am noob from runoob.com.");
m.group(); // 这里返回"I am noob from runoob.com." 
           // 因为匹配规则是 runoob之前与之后的所有字符，只有原来的输入字符串符合查找规则
       

实例3.1：
String str="The population of 2984444215 is growing";
Pattern p=Pattern.compile("\\d+"); // 查找所有的数字
Matcher m=p.matcher(str);
m.find() //返回true，因为查找到了字符
String result=m.group(); // 这里的返回值是 2984444215

实例3.2.1：
String str="The population of 2984444215 is growing";
Pattern p=Pattern.compile("\\d+"); // 匹配所有的数字
Matcher m=p.matcher(str);
m.matches() //返回false，str这个字符串的整体 不符合匹配规则
实例3.2.2：
String str="2984444215“;
Pattern p=Pattern.compile("\\d+"); // 匹配所有的数字
Matcher m=p.matcher(str);
m.matches() //返回true，str这个字符串全是数字 符合匹配规则


实例4.1，提取字符串：
        String pattern = "【美团网】(.*?)（登录验证码，请完成验证），如非本人操作，请忽略本短信。";
        String content = "【美团网】345208（登录验证码，请完成验证），如非本人操作，请忽略本短信。";
        Pattern p = Pattern.compile(pattern);
        Matcher m = p.matcher(content);
        m.groupCount(); // 只找到一个，返回1
        boolean isMatch = m.find();  // 这里返回true
        System.out.print(m.group(1));  // 返回验证码345208



实例4.2，提取字符串：
void main {
        String str = "abc3443abcfgjhgabcgfjabc";
        String rgex = "abc(.*?)abc";

        List<String> list = new ArrayList<String>();
        Pattern pattern = Pattern.compile(rgex);// 匹配的模式
        Matcher m = pattern.matcher(soap);
        while (m.find()) {  // 找到2个
            int i = 1;
            list.add(m.group(i));
            i++;
        }

        System.out.println(list); // 输出两个元素的列表：[3443, gfj]
}

-------------------------------------------------------------------------------------

在String中，一个英文字符占1个字节，而中文字符根据编码的不同所占字节数也不同。
在UTF-8编码下，一个中文字符占3个字节；而使用GBK编码时一个中文字符占2个字节。
测试代码如下：
 public static void main(String[] args) throws UnsupportedEncodingException {
        String str1 = "hello";
        String str2 = "你好abc";

        System.out.println("utf-8编码下'hello'所占的字节数:" + str1.getBytes("utf-8").length);
        System.out.println("gbk编码下'hello'所占的字节数:" + str1.getBytes("gbk").length);

        System.out.println("utf-8编码下'你好abc'所占的字节数:" + str2.getBytes("utf-8").length);
        System.out.println("gbk编码下你好'你好abc'所占的字节数:" + str2.getBytes("gbk").length);
    }

-------------------------------------------------------------------------------------

注解：定义一个类似于接口或者类的.java文件
四种元注解，用于描述 @interface (.class)
@Target
@Retention
@Document
@Inhrited

@Target
修饰使用范围：
ElementType取值：
1.CONSTRUCTOR:用于描述构造器
2.FIELD:用于描述域(域是一种属性，可以是一个类变量，一个对象变量，一个对象方法变量或者是一个函数的参数)
3.LOCAL_VARIABLE:用于描述局部变量
4.METHOD:用于描述方法
5.PACKAGE:用于描述包
6.PARAMETER:用于描述参数
7.TYPE:用于描述类、接口(包括注解类型) 或enum声明

@Retention  表示需要在什么级别保存该注释信息
RetentionPoicy取值
1.SOURCE:在源文件中有效（即源文件保留）
2.CLASS:在class文件中有效（即class保留）
3.RUNTIME:在运行时有效（即运行时保留）
使用RUTIME,注解处理器可以通过反射，获取到该注解的属性值。

@Documented:
用于描述其它类型的annotation应该被作为被标注的程序成员的公共API，
因此可以被例如javadoc此类的工具文档化。Documented是一个标记注解，没有成员。

@Inherited 标记注解，阐述了某个被标注的类型是被继承的。


例0：
一般都是这三个注解构成自定义注解：
@Target(ElementType.FIELD)
@Retention(RetentionPolicy.RUNTIME)  
@Documented 

例1：
@Target(ElementType.FIELD)
public @interface Name {  
    String value() default "";  
}

@Target(ElementType.METHOD)
public @interface GetName {  
    String name();
}

@Target(ElementType.TYPE) 
public @interface Person {  
    String PersonName();  
}

例2：
@Name("阿特罗伯斯")  
private String name;  

@GetName(name="apple")  
public String work() {  
    return "work over!";  
}

@Person(PersonName="这是一个有用的工具类")
public class Utility {  
    
    @Name("阿特罗伯斯")  
    private String name; 
  
    @GetName(name="apple")  
    public String work() {  
        return "work over!";  
    }
}  

例3：使用
Class<?> rtClass = Class.forName("com.test.Utility");  // 反射获取 Utility类
// Class<?> rtClass = Utility.class;

Field[] fields = rtClass.getDeclaredFields();   //取到的Field[]只有一个元素，因为Utility只写了 @Name
for (Field field : fields) {
            if (field.isAnnotationPresent(Name.class)) {  
                Name arg0 = field.getAnnotation(Name.class);  
                arg0.value();  // 这个值就是 "阿特罗伯斯"
            }
}

Method[] methods = rtClass.getMethods();  // 取到的Method[]只有一个元素，因为Utility只写了一个方法
boolean c = rtClass.isAnnotationPresent(Person.class);  
 if (b) {  // 判断一下 Utility.class类型是否为 Person.class
    Person p = (Person)rtClass.getAnnotation(Person.class);
    p.PersonName();  // 这个值是 "这是一个有用的工具类"
    for (Method method : methods) {  
       if (method.isAnnotationPresent( GetName.class )) {  
                        GetName g = (GetName)method.getAnnotation(GetName.class);  
                        g.name() // 这个值就是 "apple"
       }  
    }  
}  

-------------------------------------------------------------------------------------

    /**
     * 文件转base64字符串
     * @param file
     * @return
     */
    public String fileToBase64(File file) {
        String base64 = null;
        InputStream in = null;
        try {
            in = new FileInputStream(file);
            byte[] bytes = new byte[in.available()];
            int length = in.read(bytes);
            base64 = Base64.encodeToString(bytes, 0, length, Base64.DEFAULT);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (in != null) {
                    in.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return base64;
    }

-------------------------------------------------------------------------------------

可变型参
可变个数形参的方法：
格式：“数据类型 … 变量名”，如：
public void show(String ... strs){}

//第一个参数是整形，之后的string参数可变：0个到n个
public void show(int i, String ... strs){}


当调用可变个数形参的方法时，传入的参数个数可以是：0个，1个，2个…

可变个数形参的方法，与本类中方法名相同、参数列表不同的方法，也构成重载；

可变个数形参的方法，与形参是数组的同名方法，无法构成重载（即，无法共存）；
【这是由于历史原因：在jdk5.0以前，想要传入多个形参，只能使用数组； jdk5.0以后，可变类型参数相当于提供了一种传多个参数的简便方式。因此编译器认为这两种方式是完全一样的】

可变个数形参，在方法的形参中，只能声明在末尾，而且只能有一个；
【很好理解，如果放在开头或中间，或者有好几个，编译器就会分不清楚，到底前面究竟是有几个是给可变形参的（可能是你忘了写别的形参呢）】




--------------------------------------------------------------------------------------

JVM 虚拟机技术

JVM是Java Virtual Machine（Java虚拟机）的缩写，是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。
Java虚拟机主要由字节码指令集、寄存器、栈、垃圾回收堆和存储方法域等构成。 JVM屏蔽了与具体操作系统平台相关的信息，
使Java程序只需生成在Java虚拟机上运行的目标代码（字节码）,就可以在多种平台上不加修改地运行。JVM在执行字节码时，
实际上最终还是把字节码解释成具体平台上的机器指令执行。

Heap是堆，stack是栈
JVM内存结构分为：方法区（method），栈内存（stack），堆内存（heap），本地方法栈（java中的jni调用）

Java Heap
对象和数组就是存放在堆里面。
Java虚拟机管理的内存的最大一块，这块区域随着虚拟机的启动而创建。
线程安全的问题，Java Heap是一块共享的区域，操作共享区域的成员就有了锁和同步。
与Java Heap相关的还有Java的垃圾回收机制（GC）,Java Heap是垃圾回收器管理的主要区域。
新生代、老生代、永久代的概念就是在堆里面，现在大多数的GC基本都采用了分代收集算法。
Java Heap还有Eden空间，From Survivor空间,To Survivor空间等。
Java Heap可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。

栈（Stack）也称Java虚拟机栈（VM Stack）
相对于Java Heap来讲，Java Stack是线程私有的，她的生命周期与线程相同。Java Stack描述的是Java方法执行时的内存模型，
每个方法执行时都会创建一个栈帧（Stack Frame）用语存储局部变量表、操作数栈、动态链接、方法出口等信息。
每个线程在执行一个方法时，都意味着有一个栈帧在当前线程对应的栈帧中入栈和出栈。

本地方法栈（Native Stack）
本地方法栈（Native Stack）与Java虚拟机站（Java Stack）所发挥的作用非常相似，
他们之间的区别在于虚拟机栈为虚拟机栈执行java方法（也就是字节码）服务，而本地方法栈则为使用到Native方法服务。

方法区（Method Area）与堆（Java Heap）一样，是各个线程共享的内存区域，
它用于存储虚拟机加载的类信息，常量，静态变量，即时编译器编译后的代码等数据。
虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是她却有一个别名叫做非堆（Non-Heap）。
分析下Java虚拟机规范，之所以把方法区描述为堆的一个逻辑部分，应该觉得她们都是存储数据的角度出发的。
一个存储对象数据（堆），一个存储静态信息(方法区)。

对象是存放堆里面，对象的引用应该是存在栈里面的

1、线程私有的数据区域有：
Java虚拟机栈（Java Virtual Machine Stacks）
本地方法栈（Native Stack）
2、线程共有的数据区域有：
堆（Java Heap）
方法区
--------------------

上面提到的Java虚拟机栈：
Java的栈中存储以下类型数据，栈对应的英文单词是Stack
基本类型
引用类型变量
方法

栈的优势是，存取速度比堆要快，仅次于寄存器，栈数据可以共享。但缺点是，存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。
栈中主要存放一些基本类型的变量（int, short, long, byte, float, double, boolean, char）和对象句柄。
栈有一个很重要的特殊性，就是存在栈中的数据可以共享。

在函数中定义的一些基本类型的变量(8种)和对象的引用变量都是在函数的栈Stack内存中分配。当在一段代码块中定义一个变量时，
java就在栈中为这个变量分配内存空间，当超过变量的作用域后，java会自动释放掉为该变量分配的内存空间，该内存空间可以立刻被另作他用。

堆Heap内存用于存放由new创建的对象和数组。在堆中分配的内存，由java虚拟机自动垃圾回收器来管理。在堆中产生了一个数组或者对象后，
还可以在栈中定义一个特殊的变量，这个变量的取值等于数组或者对象在堆内存中的首地址，在栈中的这个特殊的变量就变成了数组或者对象的引用变量，
以后就可以在程序中使用栈内存中的引用变量来访问堆中的数组或者对象，引用变量相当于为数组或者对象起的一个别名，或者代号。

引用变量是普通变量，定义时在栈中分配内存，引用变量在程序运行到作用域外释放。而数组＆对象本身在堆中分配，
即使程序运行到使用new产生数组和对象的语句所在地代码块之外，数组和对象本身占用的堆内存也不会被释放，数组和对象在没有引用变量指向它的时候，
才变成垃圾，不能再被使用，但是仍然占着内存，在随后的一个不确定的时间被垃圾回收器释放掉。
这个也是java比较占内存的主要原因，实际上，栈中的变量指向堆内存中的变量，这就是 Java 中的指针。


--------------------

Java类加载机制
JVM加载的是.class文件。其实，类的加载指的是将类的.class文件中的二进制数据读入到内存中，
将其放在运行时数据区的方法区内，然后在堆区创建一个java.lang.Class对象，用来封装类在方法区内的数据结构。
类的加载的最终产品是位于堆区中的Class对象，Class对象封装了类在方法区内的数据结构，
并且向Java程序员提供了访问方法区内的数据结构的接口。

JVM将类的加载分为3个步骤：
1、装载（Load）
2、链接（Link）
3、初始化（Initialize）

而链接（Link）又分3个步骤：
1，验证
2，准备
3，解析

--------------------------------------------------------------------------------------

高级特性 

泛型
一、概述
Java泛型（generics）是JDK 5中引入的一个新特性，泛型提供了编译时类型安全监测机制，该机制允许程序员在编译时监测非法的类型。
使用泛型机制编写的程序代码要比那些杂乱地使用Object变量，然后再进行强制类型转换的代码具有更好的安全性和可读性。泛型对于集合类尤其有用，例如，ArrayList就是一个无处不在的集合类。
泛型的本质是参数化类型，也就是所操作的数据类型被指定为一个参数。

二、泛型的使用
泛型有三种常用的使用方式：泛型类，泛型接口和泛型方法。

泛型的定义常写作T，但是T并不是关键字，只是习惯性的写法，例如进程通常写作Application一样
也可以用其他大写字母表示泛型，U、L、K等等，如果要定义多个不同类型的泛型，那么用其他的大写字母
如 T 代表类型（type），E 代表元素*（element）等。

--------------------

一个泛型类（generic class）就是具有一个或多个类型变量的类。
/*
 * 泛型类
 * Java库中 E表示集合的元素类型，K 和 V分别表示表的关键字与值的类型
 * T（需要时还可以用临近的字母 U 和 S）表示“任意类型”
 */
public class Pair<T> {
    private T name;
    private T price;
    public Pair(T name, T price) {
        this.name = name;
        this.price = price;
    }
    public T getName() {
        return name;
    }
    public void setName(T name) {
        this.name = name;
    }
    public T getPrice() {
        return price;
    }
    public void setPrice(T price) {
        this.price = price;
    }
}

Pair类引入了一个类型变量T，用尖括号（<>）括起来，并放在类名的后面。泛型类可以有多个类型变量。例如，可以定义Pair类，其中第一个域和第二个域使用不同的类型：

public class Pair<T,U> { ... }
类方法中的类型变量指定方法的返回类型以及域和局部变量的类型。例如：

private T first; //uses the type variable
用具体的类型替换类型变量就可以实例化泛型类型，例如：

Pair<String>
可以将结果想象成带有构造器的普通类：

Pair<String>()
Pair<String>(String,String)
和方法：

String getName()
String getPrice()
void setName(String)
void setPrice(String)

实例：
Object o1 = new Object();
String s1 = "11";
Pair p = new Pair<>(o1, o1);
Pair p2 = new Pair<>(s1, s1);
Pair p3 = new Pair<>(s1, o1);
//如果没有限定使用类型，可以传入任何类型
//限定了String类型，不能传入Object：
Pair p2 = new Pair<Sring>(s1, s1);

继承Pair可以选择对泛型T进行类型限定，如果泛型限定的是Object，那也可以不需要写<Object>，
以下两处代码效果相同
public class PairString extends Pair {
......
}
public class PairString extends Pair<Object> {
......
}

也可以限定其他类，如果限定了String类，以后泛型T就是指String，包括了成员变量和方法参数，都是指String
public class PairString extends Pair<String> {
......
}

多个泛型
public class Pair2<T, U, K> {
    T mT;
    U mU;
    K mK;
	......
}

--------------------

泛型接口
public interface Generator<T> {
    public T next();
}

继承接口：
public class FruitGenerator implements Generator<String> {
    @Override
    public String next() {
        return "Fruit";
    }
}

或者也可以这样：
public class FruitGenerator<T> implements Generator<T> {
    private T next;
    public FruitGenerator(T next) {
        this.next = next;
    }
    @Override
    public T next() {
        return next;
    }
    public static void main(String[] args){
        FruitGenerator<String> fruit = new FruitGenerator<>("Fruit");
        System.out.println(fruit.next);
    }
}

--------------------

泛型方法
public class ArrayAlg {

    public static <T> T getMiddle(T... a) {
        return a[a.length / 2];
    }
    
    public static void main(String[] args){
        System.out.println(ArrayAlg.getMiddle(1,2,3,4,5));
    }
}
这个方法是在普通类中定义的，而不是在泛型类中定义的。然而，这是一个泛型方法，可以从尖括号和类型变量看出这一点。
注意，类型变量放在修饰符（这里是 public static）的后面，返回类型的前面。

--------------------------------------------------------------------------------------

JMS技术
JMS即Java消息服务（Java Message Service）应用程序接口是一个Java平台中关于面向消息中间件（MOM）的API，
用于在两个应用程序之间，或分布式系统中发送消息，进行异步通信。Java消息服务是一个与具体平台无关的API，绝大多数MOM提供商都对JMS提供支持。
个人理解，JMS技术就是用于进程通信的，jms技术只是用作javaEE开发，但是有更好的代替方案可以解决进程通信问题，所以也不怎么需要使用该技术。

动态代理
在之前的代码调用阶段，我们用action调用service的方法实现业务即可。
可以通过动态代理的方式，扩展我们的service中的方法实现，使得在原油的方法中增加更多的业务，而不是实际修改service中的方法，这种实现技术就叫做动态代理。
动态代理：在不修改原业务的基础上，基于原业务方法，进行重新的扩展，实现新的业务。
个人理解，动态代理用于javaEE，是对于service的一种横向拓展，比较灵活。
但是由于目前javaEE开发使用springBoot全家桶，又是分布式微服务架构，有更好的框架可以实现这些功能，所以动态代理也不怎么被用到了。

--------------------------------------------------------------------------------------


Java 正则表达式

举例：
        String num = "12345678";
        String regex = "[1-9][0-9]{4,10}";
        boolean b = num.matches(regex);
这个是校验以下几点：
第1个字符为 1到9
第2个字符开始 0到9至少出现4次并且不超出10次
例如：12345678，12345678912ased，这两个都是符合匹配要求的

String regex = "a"  整条字符串的每一个字符都和该字符一样才可以符合匹配条件
String regex = "^[a-zA-Z0-9]{4,6}$"  必须为数字或字母，只能为4~6位
---------------------------------------------------------------------
还能用来进行分割，例：
String num = "11,22,33";
String regex = ",";
String[] ss = num.split(regex);
for (String s : ss) {
System.out.print(s + "\n");
}
例2，把字符串以ab或者ba作为分割线来分割字符串
String num = "813871ab12323ba23452,,,ba183123ablll'===";
String regex = "[ab][ab]"; //第一个[ab]表示第1个匹配字符可以是a或者b，第2个[ab]表示第2个匹配字符可以是a或者b，这样就可以匹配到ab或者ba的字符串
String[] ss = num.split(regex); 

---------------------------------------------------------------------

1.单个字符
x		字符x标识任意字符，只有和该字符一样才可以符合匹配条件
\\		 反斜线字符 \
\n		新行(换行)符('\u000A')
\r		 回车符('\u000D')

2.字符类
[abc]		 a或者b或者c
[^abc]		除了a、b、c之外的其他全部字符
[a-zA-Z]   任何一个字母，包括大小写，都符合匹配条件
[0-9]		  数字0-9之间任何一个都符合匹配条件

3.预定义字符类
.  代表任何字符(这个符号是句号，一点)
\\d 数字 [0-9]
\\D 非数字 [^0-9]
\\w 单词字符[a-zA-Z_0-9]
\\W 非单词字符

4.边界匹配器
^ 行的开头
$ 行的结尾
\b 单词边界

5.数量词
x?      x这个字符出现1次或者0次
x*       x这个字符出现0次或者多次
x+      x这个字符1次或者多次
x{n}    x这个字符出现正好n次，可以理解为长度限定，只匹配长度为n的字符串
x{n,}   x这个字符出现至少n次(n加逗号) 
x{n,m}    x这个字符出现至少n次，但是不超过m次，可以理解为字符串长度的限定，最短n，最长m

---------------------------------------------------------------------
例子：
只能输入长度为3的字符："^.{3}$"   

任意字符出现任意次(所有输入全部匹配)：  .*

注意：可以加一个小括号把一条匹配括起来，例如
(\\w)*  表示大小写字母或者0到9或者_ 可以出现任意次，\\w 表示大小写字母或者0到9或者下划线 可以出现一次

整数或者小数：^[0-9]+\.{0,1}[0-9]{0,2}$
只能输入数字："^[0-9]*$"。
只能输入n位的数字："^\d{n}$"。
只能输入至少n位的数字："^\d{n,}$"。
只能输入m~n位的数字：。"^\d{m,n}$"
只能输入零和非零开头的数字："^(0|[1-9][0-9]*)$"。
只能输入有两位小数的正实数："^[0-9]+(.[0-9]{2})?$"。
只能输入有1~3位小数的正实数："^[0-9]+(.[0-9]{1,3})?$"。
只能输入非零的正整数："^\+?[1-9][0-9]*$"。
只能输入非零的负整数："^\-[1-9][]0-9"*$。
只能输入由26个英文字母组成的字符串："^[A-Za-z]+$"。
只能输入由26个大写英文字母组成的字符串："^[A-Z]+$"。
只能输入由26个小写英文字母组成的字符串："^[a-z]+$"。
只能输入由数字和26个英文字母组成的字符串："^[A-Za-z0-9]+$"。
只能输入由数字、26个英文字母或者下划线组成的字符串："^\w+$"。
验证用户密码："^[a-zA-Z]\w{5,17}$"正确格式为：以字母开头，长度在6~18之间，只能包含字符、数字和下划线。
验证是否含有^%&',;=?$\"等字符："[^%&',;=?$\x22]+"。
只能输入汉字："^[\u4e00-\u9fa5]{0,}$"
验证Email地址："^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$"。
验证InternetURL："^http://([\w-]+\.)+[\w-]+(/[\w-./?%&=]*)?$"。
验证电话号码："^(\(\d{3,4}-)|\d{3.4}-)?\d{7,8}$"正确格式为："XXX-XXXXXXX"、"XXXX-XXXXXXXX"、"XXX-XXXXXXX"、"XXX-XXXXXXXX"、"XXXXXXX"和"XXXXXXXX"。
验证身份证号（15位或18位数字）："^\d{15}|\d{18}$"。
验证一年的12个月："^(0?[1-9]|1[0-2])$"正确格式为："01"～"09"和"1"～"12"。
验证一个月的31天："^((0?[1-9])|((1|2)[0-9])|30|31)$"正确格式为；"01"～"09"和"1"～"31"。
匹配中文字符的正则表达式： [\u4e00-\u9fa5]
匹配双字节字符(包括汉字在内)：[^\x00-\xff]
应用：计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）
String.prototype.len=function(){return this.replace(/[^\x00-\xff]/g,"aa").length;}
匹配空行的正则表达式：\n[\s| ]*\r
匹配html标签的正则表达式：<(.*)>(.*)<\/(.*)>|<(.*)\/>
匹配首尾空格的正则表达式：(^\s*)|(\s*$)

---------------------------------------------------------------------
Pattern和Matcher
java.util.regex是一个用正则表达式所订制的模式来对字符串进行匹配工作的类库包。它包括两个类：Pattern和Matcher Pattern 一个Pattern是一个正则表达式经编译后的表现模式。 Matcher 一个Matcher对象是一个状态机器，它依据Pattern对象做为匹配模式对字符串展开匹配检查。 首先一个Pattern实例订制了一个所用语法与PERL的类似的正则表达式经编译后的模式，然后一个Matcher实例在这个给定的Pattern实例的模式控制下进行字符串的匹配工作。

Pattern p=Pattern.compile("\\d+"); 
Matcher m=p.matcher("aaa2223bb"); 
m.find();//匹配2223 
m.start();//返回3 
m.end();//返回7,返回的是2223后的索引号 
m.group();//返回2223 

Pattern p=Pattern.compile("([a-z]+)(\\d+)"); 
Matcher m=p.matcher("aaa2223bb"); 
m.find();   //匹配aaa2223 
m.groupCount();   //返回2,因为有2组 
m.start(1);   //返回0 返回第一组匹配到的子字符串在字符串中的索引号 
m.start(2);   //返回3 
m.end(1);   //返回3 返回第一组匹配到的子字符串的最后一个字符在字符串中的索引位置. 
m.end(2);   //返回7 
m.group(1);   //返回aaa,返回第一组匹配到的子字符串 
m.group(2);   //返回2223,返回第二组匹配到的子字符串 

Mathcer m2=m.matcher("2223bb"); 
m.lookingAt();   //匹配2223 
m.start();   //返回0,由于lookingAt()只能匹配前面的字符串,所以当使用lookingAt()匹配时,start()方法总是返回0 
m.end();   //返回4 
m.group();   

matches:整个匹配，只有整个字符序列完全匹配成功，才返回True，否则返回False。但如果前部分匹配成功，将移动下次匹配的位置。
lookingAt:部分匹配，总是从第一个字符进行匹配,匹配成功了不再继续匹配，匹配失败了,也不继续匹配。
find:部分匹配，从当前位置开始匹配，找到一个匹配的子串，将移动下次匹配的位置。
reset:给当前的Matcher对象配上个新的目标，目标是就该方法的参数；如果不给参数，reset会把Matcher设到当前字符串的开始处。

对于^ 和 $的理解，需要配合Pattern和Matcher来使用，如果直接使用string.matches效果比较弱深圳可能出错
^x表示匹配以字符x为开头的字符串
x$表示匹配以字符x为结尾的字符串
例如，以下例子均打印true：
匹配 以1为开头，以1为结束，中间任意长度的字符：
Pattern p = Pattern.compile("(^1)(.*)(1$)");
Matcher m = p.matcher("1aadasdasd1");
if (m.find()) {
	System.out.print("true");
} else {
	System.out.print("false");
}
匹配 以1为开头，任意长度的字符：
Pattern p = Pattern.compile("^1");
Matcher m = p.matcher("1aadasdasd");
匹配 以1为结束，任意长度的字符：
Pattern p = Pattern.compile("1$");
Matcher m = p.matcher("aad+-'/?>,2134asdasd1");
匹配 1：
Pattern p = Pattern.compile("1");
Matcher m = p.matcher("aad+-'/?>,2134asd1asd");
匹配 单个字符1，字符串必须就是1：
Pattern p = Pattern.compile("^1$");
Matcher m = p.matcher("1");

--------------------------------------------------------------------------------------

设计模式

设计模式分为三种大类型：
创建型模式：对象实例化的模式，创建型模式用于解耦对象的实例化过程。
结构型模式：把类或对象结合在一起形成一个更大的结构。
行为型模式：类和对象如何交互，及划分责任和算法。


创建型模式：
单例模式：某个类只能有一个实例，提供一个全局的访问点。
简单工厂：一个工厂类根据传入的参量决定创建出那一种产品类的实例。
工厂方法：定义一个创建对象的接口，让子类决定实例化那个类。
抽象工厂：创建相关或依赖对象的家族，而无需明确指定具体类。
建造者模式：封装一个复杂对象的构建过程，并可以按步骤构造。
原型模式：通过复制现有的实例来创建新的实例。

 
创建型模式：
适配器模式：将一个类的方法接口转换成客户希望的另外一个接口。
组合模式：将对象组合成树形结构以表示“”部分-整体“”的层次结构。
装饰模式：动态的给对象添加新的功能。
代理模式：为其他对象提供一个代理以便控制这个对象的访问。
亨元（蝇量）模式：通过共享技术来有效的支持大量细粒度的对象。
外观模式：对外提供一个统一的方法，来访问子系统中的一群接口。
桥接模式：将抽象部分和它的实现部分分离，使它们都可以独立的变化。

 
行为型模式：
模板模式：定义一个算法结构，而将一些步骤延迟到子类实现。
解释器模式：给定一个语言，定义它的文法的一种表示，并定义一个解释器。
策略模式：定义一系列算法，把他们封装起来，并且使它们可以相互替换。
状态模式：允许一个对象在其对象内部状态改变时改变它的行为。
观察者模式：对象间的一对多的依赖关系。
备忘录模式：在不破坏封装的前提下，保持对象的内部状态。
中介者模式：用一个中介对象来封装一系列的对象交互。
命令模式：将命令请求封装为一个对象，使得可以用不同的请求来进行参数化。
访问者模式：在不改变数据结构的前提下，增加作用于一组对象元素的新功能。
责任链模式：将请求的发送者和接收者解耦，使的多个对象都有处理这个请求的机会。
迭代器模式：一种遍历访问聚合对象中各个元素的方法，不暴露该对象的内部结构。

----------------------

工厂模式
定义接口，多种实体类实例化接口，创建一个工厂来生产实体类。
实体类可以有多种，用switch来判断要生产哪一种。
每次增加新的产品，就要定义多一种实体类；switch那里也要多加一条分支，判断生产哪一种实体类

抽象工厂
就是连普通工厂都由一个超级工厂来创建。
工厂方法模式是针对一个产品系列的，而抽象工厂模式是针对多个产品系列的。
用法：定义抽象工厂类，每多一种工厂就要多一个方法用来返回工厂。工厂的实体类似于普通工厂。

----------------------

代理模式，分为两种：普通代理（静态代理），动态代理
普通代理要写三个部分：
1.代理接口、2.代理类、3.被代理类，其中代理类和被代理类 都要实例化代理接口，
代理类 调用 被代理类的 接口方法，这样就形成了代理。

Spring的两大核心之一的AOP就是动态代理模式的经典案例，在AOP的源码中，springboot的初始化过程中，底层代码创建了大量的Proxy来创建对象。
在Spring中的面向切面编程（AOP），我们能在一个切点之前执行一些操作，在一个切点之后执行一些操作，这个切点就是一个个方法。这些方法所在类肯定就是被代理了，在代理过程中切入了一些其他操作。
如果代理类有很多个，那么每一处都要改一下代码，这里就可以直接使用动态代理来解决。

例如：
代理接口
public interface Person {
    void say();
}
被代理类
public class Student implements Person {
    @Override
    public void say() {
       System.out.println("hello");
    }
}
代理类
public class StudentsProxy implements Person {
    //被代理的学生
    Student stu;
    public StudentsProxy(Person stu) {
        // 只代理学生对象
        if(stu.getClass() == Student.class) {
            this.stu = (Student)stu;
        }
    }
//代理
    @Override
    public void say() {
        stu.say();
    }
}
Main方法调用
    public static void main(String[] args) {
        //被代理的学生张三
        Person zhangsan = new Student();
        //生成代理对象，并将 被代理 传给代理对象
        Person monitor = new StudentsProxy(zhangsan);
        //班长代理上交班费
        monitor.say();
    }


StudentsProxy的say方法还能在 stu.say();之前或者之后调用一些其他操作，例如
    @Override
    public void say() {
	System.out.println("zhangsan saying: ");
        stu.say();
    }



动态代理

代理类在程序运行时创建的代理方式被成为动态代理。 普通的代理类是自己先定义好的，在程序运行之前就已经编译完成。
然而动态代理，代理类并不是在Java代码中定义的，而是在运行时根据我们在Java代码中的“指示”动态生成的。
相比于静态代理， 动态代理的优势在于可以很方便的对代理类的函数进行统一的处理，而不用修改每个代理类中的方法。

在java的java.lang.reflect包下提供了一个Proxy类和一个InvocationHandler接口，通过这个类和这个接口可以生成JDK动态代理类和动态代理对象。

动态代理的优势在于可以很方便的对代理类的函数进行统一的处理，而不用修改每个代理类中的方法。是因为所有被代理执行的方法，
都是通过在InvocationHandler中的invoke方法调用的，所以我们只要在invoke方法中统一处理，就可以对所有被代理的方法进行相同的操作了

总结，就是实例化InvocationHandler接口，还可以在InvocationHandler 的接口invoke()方法对Bean对象进行代理(代理前后进行日志输出)
再放入Proxy.newProxyInstance()中，创建一个代理对象，在invoke前、后、环绕处 加入增强
例如下面的 Person stuProxy，就是一个继承了Proxy类和实例Person接口的对象，
由于代理类已经继承了 Proxy类，因此 动态代理技术只能针对接口进行代理。

实例

     public static void main(String[] args) {

        //创建一个实例对象，这个对象是被代理的对象
        Person zhangsan = new Student();

        //创建一个与代理对象相关联的InvocationHandler
        InvocationHandler stuHandler = new StuInvocationHandler<Person>(zhangsan);

        //创建一个代理对象stuProxy来代理zhangsan，代理对象的每个执行方法都会替换执行Invocation中的invoke方法
        Person stuProxy = (Person) Proxy.newProxyInstance(Person.class.getClassLoader(), new Class<?>[]{Person.class}, stuHandler);

        //代理执行方法
        stuProxy.say();
    }

    public interface Person {
        void say();
    }
    public static class Student implements Person {
        @Override
        public void say() {
            try {
                //假设准备一秒时间
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println("hello");
        }
    }
    public static class StuInvocationHandler<T> implements InvocationHandler {
        //invocationHandler持有的被代理对象
        T target;

        public StuInvocationHandler(T target) {
            this.target = target;
        }

        /**
         * proxy:代表动态代理对象
         * method：代表正在执行的方法
         * args：代表调用目标方法时传入的实参
         */
        @Override
        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
            System.out.println("代理执行" +method.getName() + "方法");
            Object result = method.invoke(target, args);
            return result;
        }
    }
----------------------

观察者模式（Observer），又叫发布-订阅模式（Publish/Subscribe），定义对象间一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并自动更新。

说白了就是 被观察者对象建立一个监听器列表，当发生改变时，调用这些监听器的监听接口方法。

    public static void main(String args[]){
        //定义一个被观察者
        Button button = new Button() ;
        //注册其中一个观察者
        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                System.out.println("TigerChain");
            }
        });
        // 注册另一个观察者
        button.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                System.out.println("never give up");
            }
        });
        // 被观察者触发事件
        button.click();
    }

public class Button extends View {
}
public class View {
    //观察者的列表
    private ArrayList<OnClickListener> onClickListeners = new ArrayList<>() ;
    // 触发通知
    protected void click(){
        for(OnClickListener onClickListener:onClickListeners){
            if(onClickListener !=null){
                onClickListener.onClick(View.this);
            }
        }
    }
    // 注册观察者
    public void setOnClickListener(OnClickListener onClickListener){
        onClickListeners.add(onClickListener) ;
    }

    public interface OnClickListener{
        // 定义通知的方法
        void onClick(View v) ;
    }

    public void unRegister(OnClickListener onClickListener){
        if(onClickListeners.contains(onClickListener)){
            onClickListeners.remove(onClickListener) ;
        }
    }
}








----------------------

单例模式，两种写法，懒汉，饿汉

饿汉：在定义开始，便实例化自己
public class Single0 {
	//私有构造方法，不允许外部new
	private Single0() {
	}
	//内部创建静态方法，实例化
	private static Single0 s=new Single0();
	//提供静态方法，每次有其他类调用，就把当前的静态变量返回去
	public static Single0 getsingle() {
		return s;
	}
}


懒汉：在第一次调用时实例化自己。
public class Single1{
	//私有构造方法，不允许外部调用构造方法
	private Single1() {
	}
	public static Single1 s=null;
	// Single1类在getsingle方法里面，调用了自己的构造方法，new了一个自己的对象
	public static Single1 getsingle() {
		if (s == null) {
		s=new Single1(); 
		}
		return s;
	}
}

1）饿汉式是空间换时间，懒汉式是空间换时间。
2）在多线程访问的时候，懒汉式可能会创建多个对象，而饿汉式不会。
3）懒汉是在第一次调用过之后才会创建对象。如果从来没有线程调用过，懒汉不存在内存开销，因为这个对象从未被创建。
     饿汉是在类初始化阶段，在主函数执行时就创建了这个静态变量。

----------------------


序列化与反序列化

序列化：指堆内存中的java对象数据，通过某种方式把对存储到磁盘文件中，或者传递给其他网络节点（网络传输）。这个过程称为序列化，通常是指将数据结构或对象转化成二进制的过程。
即将对象转化为二进制，用于保存，或者网络传输。

反序列化：把磁盘文件中的对象数据或者把网络节点上的对象数据，恢复成Java对象模型的过程。也就是将在序列化过程中所生成的二进制串转换成数据结构或者对象的过程
与序列化相反，将二进制转化成对象。

序列化和反序列化实现：

要实现对象的序列化，最直接的操作就是实现Serializable接口
使用IO流中的对象流可以实现序列化操作，将对象保存到文件，再读取出来。
首先创建一个对象，并实现Serializable接口：
import java.io.Serializable;
public class User implements Serializable{
    private static final long serialVersionUID = 1L;
    private String name;
    private int age;
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public int getAge() {
        return age;
    }
    public void setAge(int age) {
        this.age = age;
    }
    @Override
    public String toString() {
        return "User [name=" + name + ", age=" + age + "]";
    }
}

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
public class SerializeUtil {
    // 保存对象，序列化
    public static void saveObject(Object object) throws Exception {
        ObjectOutputStream out = null;
        FileOutputStream fout = null;
        try {
            fout = new FileOutputStream("D:/1.txt");
            out = new ObjectOutputStream(fout);
            out.writeObject(object);
        } finally {
            fout.close();
            out.close();
        }
    }
    // 读取对象，反序列化
    public static Object readObject() throws Exception {
        ObjectInputStream in = null;
        FileInputStream fin = null;
        try {
            fin = new FileInputStream("D:/1.txt");
            in = new ObjectInputStream(fin);
            Object object = in.readObject();
            return object;
        } finally {
            fin.close();
            in.close();
        }
    }
}



















