
Gson

//把ArrayList<String>转成 json字符串
String arrayString = new Gson().toJson(imagePathList);

//把之前的json字符串，转成ArrayList<String>
Type listTimeType = new TypeToken<ArrayList<String>>(){}.getType();
List<String> arrayList = new Gson().fromJson(arrayString, listTimeType);





-------------------------------------------------------------------------------------

Glide官网：
https://github.com/bumptech/glide

磁盘缓存配置：
package com.mypackage;
public class MyGlideModule implements GlideModule {
    @Override public void applyOptions(Context context, GlideBuilder builder) {
        // Apply options to the builder here.
		builder.setDiskCache(
			new DiskLruCacheFactory(path, yourSizeInBytes));
    }

    @Override public void registerComponents(Context context, Glide glide) {
        // register ModelLoaders here.
    }
}

<manifest ...>
    <application ...>
        <meta-data
            android:name="com.mypackage.MyGlideModule"
            android:value="GlideModule" />
    </application>
</manifest>

配置好了之后，在磁盘中会将下载下来的图片缓存
建议使用以下路径，
context.getCacheDir()
context.getExternalCacheDir()

如果是直接写入sd卡的路径，加载图片爆出异常，
例如 Environment.getExternalStorageState()


加载图片：
一般有三种方式；

普通方式1：
Glide.with(this).load(imageUri2).into(mImageView);
普通方式2，增加磁盘缓存，图片会保存在配置好的磁盘缓存路径下，
再次load图片时，会直接读取磁盘图片：
Glide.with(this).load(imageUri2).diskCacheStrategy(DiskCacheStrategy.SOURCE).into(mImageView);

磁盘缓存方式，仅下载，图片会保存在配置好的磁盘缓存路径下，
再次load图片时，会直接读取磁盘图片：
FutureTarget<File> future = Glide.with(getApplication())
		.load(imageUri3)
		.downloadOnly(500, 500);
cacheFile = future.get();

获取bitmap方式，尝试过在获取myBitmap时
Bitmap myBitmap = Glide.with(applicationContext)
    .load(yourUrl)
    .asBitmap()
    .into(500, 500)
    .get()

获取bitmap，磁盘缓存
DrawableTypeRequest drawableTypeRequest = Glide.with(getApplicationContext()).load(imageUri);
drawableTypeRequest.diskCacheStrategy(DiskCacheStrategy.SOURCE);
theBitmap = (Bitmap) drawableTypeRequest.asBitmap().into(500, 500).get();


在recycleview的子项中，使用glide，需要注意的是，
不要让子项是一个imageview，并且把用于加载网络图片，该情况会导致recycle滑动残留
要在iamgeview外面包裹一个layout

在滑动时，最好暂停glide的加载，滑动结束才加载

加载时，最好加上占位符













-------------------------------------------------------------------------------------



OK HTTP


// 不管是同步还是异步，不管是get请求还是post请求，
// 都是创建一个Request对象，得到一个RequestBody对象的过程



get请求
String url = "https://www.***.***;
OkHttpClient okHttpClient = new OkHttpClient();
Request request = new Request.Builder()
    .url(url)
    .build();
Call call = okHttpClient.newCall(request);

//同步get
try {
    Response response = call.execute();
    (response.body().string());
} catch (Exception e) {
}

//异步get
call.enqueue(new Callback() {
@Override
public void onFailure(Call call, IOException e) {
}
@Override
public void onResponse(Call call, final Response response) throws IOException {
}
});



Post请求，以下例子是post发布，表单参数
官方github上有教程用于使用post字节流、文件

String url = "https://www.baidu.com/";
OkHttpClient okHttpClient = new OkHttpClient();

RequestBody body = new FormBody.Builder()
    .add(“key”, “value”)
    .add("key", "value")
    ...
    .build();

Request request = new Request.Builder()
    .url(url)
    .post(body)
    .build();

//同步post
Call call = okHttpClient.newCall(request);
try {
    Response response = call.execute();
} catch (Exception e) {
}

//异步post
call.enqueue(new Callback() {
 @Override
public void onFailure(Call call, IOException e) {
}
 @Override
public void onResponse(Call call, final Response response) throws IOException {
});

----------

所有的HTTP客户端配置都在OkHttpClient中，包括代理设置，超时和缓存。 
当您需要更改单个呼叫的配置时，请调用OkHttpClient.newBuilder（）。

请求时附加请求头
    Request request = new Request.Builder()
        .url("https://api.github.com/repos/square/okhttp/issues")
        .header("User-Agent", "OkHttp Headers.java")
        .addHeader("Accept", "application/json; q=0.5")
        .addHeader("Accept", "application/vnd.github.v3+json")
        .build();


// 设置缓存，只能存get请求
 大多数应用程序应该只调用一次新的OkHttpClient（），配置它的缓存，并在任何地方使用同一个实例。
  public CacheResponse(File cacheDirectory) throws Exception {
    int cacheSize = 10 * 1024 * 1024; // 10 MiB
    Cache cache = new Cache(cacheDirectory, cacheSize);

    client = new OkHttpClient.Builder()
        .cache(cache)
        .build();
  }


// 自己实现一个post缓存,利用了okhttp的拦截接口Interceptor
new OkHttpClient.Builder()
.addInterceptor(new CachePostResponseInterceptor(context))
.build();

// 断网下使用磁盘缓存，没断网则正常读取网络数据
// 缓存的磁盘文件夹，是位于属于该应用的磁盘缓存文件夹
public class CachePostResponseInterceptor implements Interceptor {

    private Context mContext;

    public CachePostResponseInterceptor(Context context) {
        mContext = context.getApplicationContext();
    }

    private boolean isNetworkAvailable() {
        ConnectivityManager connectivityManager
                = (ConnectivityManager) mContext.getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();
        return activeNetworkInfo != null && activeNetworkInfo.isConnected();
    }

    @Override
    public Response intercept(Chain chain) throws IOException {
        Request request = chain.request();
        boolean netAvailable = isNetworkAvailable();

        if (netAvailable) {
            request = request.newBuilder()
                    .cacheControl(CacheControl.FORCE_NETWORK)
                    .build();
            Response response = chain.proceed(request);

            // save data POST request
            if (request.method().equals("POST")) {
                //String key = getKey(request);
                String key = request.url().toString();
                final String jsonData = response.body().string();

                ResponseBody myResponseBody = new CachePostResponseBody(jsonData);
                Response.Builder builder = response.newBuilder();
                builder.body(myResponseBody);

                File fileDir = DiskCache.getOkHttpCacheDir(mContext);
                if (fileDir != null) {
                    String fileName = DiskCache.getFileNameFromUri(key);
                    File jsonFile = new File(fileDir, fileName);
                    DiskCache.createNewFileAndWrite(jsonData, jsonFile);
                }

                return builder.build();
            }
            return response;
        } else {
            request = request.newBuilder()
                    .cacheControl(CacheControl.FORCE_CACHE)
                    .build();
            Response response = chain.proceed(request);

            // read data for POST request
            if (request.method().equals("POST")) {
                //String key = getKey(request);
                String key = request.url().toString();

                File fileDir = DiskCache.getOkHttpCacheDir(mContext);
                if (fileDir != null) {
                    String fileName = DiskCache.getFileNameFromUri(key);
                    File jsonFile = new File(fileDir, fileName);
                    // if jsonFile exists, load json from disk
                    if (jsonFile.exists() && !jsonFile.isDirectory()) {
                        final String jsonData = DiskCache.readFile(jsonFile);

                        ResponseBody myResponseBody = new CachePostResponseBody(jsonData);
                        Response.Builder builder = response.newBuilder().code(CACHE_CODE);
                        builder.body(myResponseBody);
                        Response myResponse = builder.build();
                        myResponse.code();
                        return myResponse;
                    }
                }
            }
            return response;
        }
    }

    public static File getOkHttpCacheDir(Context context) {
        String filePathStr;
        if (existSDCard()) {
            filePathStr = context.getExternalCacheDir() + "/" + "OkHttpCache";
        } else {
            filePathStr = context.getCacheDir() + "/" + "OkHttpCache";
        }

        File file = new File(filePathStr);
        if (!file.exists()) {
            file.mkdir();
        } else if (!file.isDirectory()) {
            file.delete();
            file.mkdir();
        }
        return file;
    }
}



使用Call.cancel（）立即停止正在进行的呼叫。 如果线程正在写入请求或读取响应，则会收到IOException。
call.cancel();


//设置超时
    client = new OkHttpClient.Builder()
        .connectTimeout(10, TimeUnit.SECONDS)
        .writeTimeout(10, TimeUnit.SECONDS)
        .readTimeout(30, TimeUnit.SECONDS)
        .build();


下载文件
FileOutputStream fos = new FileOutputStream("d:/tmp.txt");
            fos.write(response.body().bytes());
            fos.close();




-------------------------------------------------------------------------------------


Retrofit
是一个网络请求库，基于okhttp（网络请求由okhttp完成），IO操作由okio处理，
如果使用gradle导入Retrofit，会发现自动同时会导入其他库，例如okhttp和okio

App应用程序通过 Retrofit 请求网络，实际上是使用 Retrofit 接口层封装请求参数、Header、Url 等信息，之后由 OkHttp 完成后续的请求操作
在服务端返回数据之后，OkHttp 将原始的结果交给 Retrofit，Retrofit根据用户的需求对结果进行解析

符合REST设计标准的API，即RESTful API。REST架构设计，遵循的各项标准和准则，就是HTTP协议的表现，
换句话说，HTTP协议就是属于REST架构的设计模式。比如，无状态，请求-响应。。。


简单获取json实例：
0. 导入依赖 com.squareup.retrofit2:converter-gson
1. 创建用gson format 创建json解析类：JsonItem
2. 创建接口
public interface GetCallInterface {
    @GET("MyWebTest/ReturnServlet")
    Call<JsonItem> getCall();
}
3. 创建 Retrofit 、 GetCallInterface 、Call<JsonItem>，
   并入队进行请求，最后获取结果
        Retrofit retrofit = new Retrofit.Builder().baseUrl("http://10.0.160.223:8080/") // 定义访问的主机地址
                .addConverterFactory(GsonConverterFactory.create())  //解析方法
                .build();

        GetCallInterface request = retrofit.create(GetCallInterface.class);

        Call<JsonItem> call = request.getCall();

        call.enqueue(new Callback<JsonItem>() {
            @Override
            public void onResponse(Call<JsonItem> call, Response<JsonItem> response) {
                JsonItem item = response.body();
                mTextView.setText(item.toString());
                Log.e("", "");
            }
            @Override
            public void onFailure(Call<JsonItem> call, Throwable throwable) {
                System.out.println("请求失败");
                System.out.println(throwable.getMessage());
            }
        });
 
4. 值得注意的是 url是分两段拼接的： http://10.0.160.223:8080/MyWebTest/ReturnServlet

5. call.cancel() 终止正在进行的请求

--------------------

post表单，获取string类型的response 实例：
1. 导入依赖库：com.squareup.retrofit2:converter-scalars
2. 添加三个方法：
    public interface postGetIsRegisterInterface {
        @FormUrlEncoded
        @POST("index/testPost")
        Call<String> testLogin(@Field("username") String username, @Field("password") String password);
    }
    private void isRegister() {
        postGetIsRegisterInterface request = getRetrofit().create(postGetIsRegisterInterface.class);
        Call<String> call = request.testLogin("wrx", "123456");
        call.enqueue(new Callback<String>() {
            @Override
            public void onResponse(Call<String> call, Response<String> response) {
                mTextView.setText(response.body());
            }
            @Override
            public void onFailure(Call<String> call, Throwable throwable) {
                System.out.println("请求失败");
                System.out.println(throwable.getMessage());
            }
        });
    }
    private Retrofit mRetrofit;
    public static final String URL = "http://192.168.18.102:8080";
    private Retrofit getRetrofit() {
        if (mRetrofit == null) {
            mRetrofit = new Retrofit.Builder()
                    .baseUrl(URL)
                    .addConverterFactory(ScalarsConverterFactory.create())
                    .build();
        }
        return mRetrofit;
    }
3. 最后调用isRegister()，从服务器获取信息

--------------------

post json，返回json实例：
调用isRegister()方法

    public interface postGetIsRegisterInterface {
        @POST("query/isRegister")
        Call<JsonItem> createTask(@Body UserInfo task);
    }
    private void isRegister() {
        UserInfo userInfo = new UserInfo("wrx", "123456", "123456", "456789");
        postGetIsRegisterInterface request = getRetrofit().create(postGetIsRegisterInterface.class);
        Call<JsonItem> call = request.createTask(userInfo);
        call.enqueue(new Callback<JsonItem>() {
            @Override
            public void onResponse(Call<JsonItem> call, Response<JsonItem> response) {
                JsonItem jsonItem = response.body();
                mTextView.setText(jsonItem.getStatus());
            }
            @Override
            public void onFailure(Call<JsonItem> call, Throwable throwable) {
                System.out.println("请求失败");
                System.out.println(throwable.getMessage());
            }
        });
    }

    private Retrofit mRetrofit;
    public static final String URL = "http://192.168.18.102:8080";
    private Retrofit getRetrofit() {
        if (mRetrofit == null) {
            mRetrofit = new Retrofit.Builder().baseUrl(URL) // 定义访问的主机地址
                    .addConverterFactory(GsonConverterFactory.create())  //解析方法
                    .build();
        }
        return mRetrofit;
    }



--------------------

各种注解的使用

1. @PATH 动态获取URL地址，user参数传入
    @GET("users/{user}/repos")
    Call<JsonItem> listRepos(@Path("user") String user);


2. @Query 动态指定 条件 获取信息, 
   @QueryMap 动态指定 条件组 获取信息:

@GET("group/{id}/users")
Call<List<User>> groupList(@Path("id") int groupId, @Query("sort") String sort);
在@Query(“sort”)中，short就好比是URL请求地址中的键，而它说对应的String sort中的sort则是它的值。

@GET("group/{id}/users")
Call<List<User>> groupList(@Path("id") int groupId, @QueryMap Map<String, String> options);
使用@QueryMap注解可以分别地从Map集合中获取到元素，然后进行逐个的拼接在一起。


3. @POST + @Body，直接把一个对象当成Post请求体发出去，非表单提交
接口方法创建
@POST("users/new")
Call<User> createUser(@Body User user);
接口使用
Call<List<User>> repos = service.createUser(new User(1, “UserName”, "28", "http://write.blog.csdn.net/postlist"));


4. @POST + @Field/@FieldMap携带数据类型为表单键值对
@FormUrlEncoded
@POST("user/edit")
Call<User> updateUser(@Field("first_name") String first, @Field("last_name") String last);

@FormUrlEncoded注解来标明这是一个表单请求
@Field注解来标示所对应的String类型数据的键

@FormUrlEncoded
@POST("/things")
Call<ResponseBody> things(@FieldMap Map<String, String> fields);


5. @Part 文件上传
@Multipart
@PUT("user/photo")
Call<User> updateUser(@Part("photo") RequestBody photo, @Part("description") RequestBody description);
@Multipart注解注明，它表示允许多个@Part
@Part则对应的一个RequestBody 对象，RequestBody 则是一个多类型的，当然也是包括文件的。

File file = new File(Environment.getExternalStorageDirectory(), "ic_launcher.png");
RequestBody photoRequestBody = RequestBody.create(MediaType.parse("image/png"), file);
RequestBody descriptionRequestBody = RequestBody.create(null, "this is photo.");
Call<User> call = service.updateUser(photoRequestBody, descriptionRequestBody);
创建了两个RequestBody 对象，然后调用我们定义的updateUser方法，并把RequestBody传递进入，这样就实现了文件的上传。


6. @PartMap 多文件上传
@Multipart
@PUT("user/photo")
Call<User> updateUser(@PartMap Map<String, RequestBody> photos, @Part("description") RequestBody description);
使用一个集合类型的Map封装了文件，并用@PartMap注解来标示起来


7. @Headers / @HeaderMap

@Headers("Cache-Control: max-age=640000")
@GET("widget/list")
Call<List<Widget>> widgetList();

@Headers({
    "Accept: application/vnd.github.v3.full+json",
    "User-Agent: Retrofit-Sample-App"
})

@GET("users/{username}")
Call<User> getUser(@Path("username") String username);
@GET("user")
Call<User> getUser(@Header("Authorization") String authorization)


@GET("/search")
void list(@HeaderMap Map<String, String> headers);
//map
Map<String,String> headers = new HashMap()<>;
headers.put("Accept","text/plain");
headers.put("Accept-Charset", "utf-8");



----------------------------

问题：
1. @QueryMap和@Body的区别：
@QueryMap注解会把参数拼接到url后面，所以它适用于GET请求；@Body会把参数放到请求体中，所以适用于POST请求。

2. @FieldMap和@Body的区别：
@Body将Java对象作为请求主体发送，@Field以表单形式发送数据 


-------------------------------------------------------------------------------------


RxJava
导入到android项目需要两个库,
RxAndroid 和 RxJava (在gradle中只需依赖RxAndroid库即可，会自动导入RxJava库)


用途 
一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序的库
代替 AsyncTask，代码更加简洁


------------------------------
RxJava观察者模式：
        //创建一个观察者
        Observer<String> observer = new Observer<String>() {
            @Override
            public void onSubscribe(Disposable d) {
            }
            @Override
            public void onNext(String s) {
            }
            @Override
            public void onError(Throwable e) {
            }
            @Override
            public void onComplete() {
            }
        };
        //使用Observable.create()创建被观察者
        Observable observable = Observable.create(new ObservableOnSubscribe() {
            @Override
            public void subscribe(ObservableEmitter emitter) throws Exception {
                emitter.onNext("Hello");
                emitter.onNext("Wrold");
                emitter.onComplete();
            }
        });
        //订阅
        observable.subscribe(observer);

------------------------------
主线程监听
    private void startMainLooperObservable() {
        Observable.just("one", "two", "three", "four", "five")
                .subscribeOn(Schedulers.newThread())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new DisposableObserver<String>() {
                    @Override public void onComplete() {
                        Log.d(TAG, "onComplete()");
                    }
                    @Override public void onError(Throwable e) {
                        Log.e(TAG, "onError()", e);
                    }
                    @Override public void onNext(String string) {
                        Log.d(TAG, "onNext(" + string + ")");
                    }
                });
    }
------------------------------

子线程监听
private void startBackLooperObservable() {
        HandlerThread handlerThread = new HandlerThread("backgroundThread");
        if (!handlerThread.isAlive())
            handlerThread.start();
        Looper backgroundLooper = handlerThread.getLooper();
        Observable.just("one", "two", "three", "four", "five")
                .observeOn(AndroidSchedulers.from(backgroundLooper))
                .subscribe(new DisposableObserver<String>() {
                    @Override public void onComplete() {
                        Log.d(TAG, "onComplete()");
                    }
                    @Override public void onError(Throwable e) {
                        Log.e(TAG, "onError()", e);
                    }
                    @Override public void onNext(String string) {
                        Log.d(TAG, "onNext(" + string + ")");
                    }
                });
    }



------------------------------

Github的 restfull api v3
https://developer.github.com/v3/
https://api.github.com/

{
  "current_user_url": "https://api.github.com/user",
  "current_user_authorizations_html_url": "https://github.com/settings/connections/applications{/client_id}",
  "authorizations_url": "https://api.github.com/authorizations",
  "code_search_url": "https://api.github.com/search/code?q={query}{&page,per_page,sort,order}",
  "commit_search_url": "https://api.github.com/search/commits?q={query}{&page,per_page,sort,order}",
  "emails_url": "https://api.github.com/user/emails",
  "emojis_url": "https://api.github.com/emojis",
  "events_url": "https://api.github.com/events",
  "feeds_url": "https://api.github.com/feeds",
  "followers_url": "https://api.github.com/user/followers",
  "following_url": "https://api.github.com/user/following{/target}",
  "gists_url": "https://api.github.com/gists{/gist_id}",
  "hub_url": "https://api.github.com/hub",
  "issue_search_url": "https://api.github.com/search/issues?q={query}{&page,per_page,sort,order}",
  "issues_url": "https://api.github.com/issues",
  "keys_url": "https://api.github.com/user/keys",
  "notifications_url": "https://api.github.com/notifications",
  "organization_repositories_url": "https://api.github.com/orgs/{org}/repos{?type,page,per_page,sort}",
  "organization_url": "https://api.github.com/orgs/{org}",
  "public_gists_url": "https://api.github.com/gists/public",
  "rate_limit_url": "https://api.github.com/rate_limit",
  "repository_url": "https://api.github.com/repos/{owner}/{repo}",
  "repository_search_url": "https://api.github.com/search/repositories?q={query}{&page,per_page,sort,order}",
  "current_user_repositories_url": "https://api.github.com/user/repos{?type,page,per_page,sort}",
  "starred_url": "https://api.github.com/user/starred{/owner}{/repo}",
  "starred_gists_url": "https://api.github.com/gists/starred",
  "team_url": "https://api.github.com/teams",
  "user_url": "https://api.github.com/users/{user}",
  "user_organizations_url": "https://api.github.com/user/orgs",
  "user_repositories_url": "https://api.github.com/users/{user}/repos{?type,page,per_page,sort}",
  "user_search_url": "https://api.github.com/search/users?q={query}{&page,per_page,sort,order}"
}




用户很多，随便输个123456就有数据
https://api.github.com/users/{user}















