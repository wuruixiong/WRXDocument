


对象关系映射（Object Relational Mapping，简称ORM）是通过使用描述对象和数据库之间映射的元数据，将面向对象语言程序中的对象自动持久化到关系数据库中。简单来说就是将数据库表与java实体对象做一个映射

ORM的优缺点

优点：符合面向对象编程；技术与业务解耦，开发时不需要关注数据库的连接与释放；
缺点：orm会牺牲程序的执行效率和会固定思维模式

orm主流框架
hibernate（jpa）、mybatis/mybatis-plus(半自动orm)。
基于jpa规范再次封装抽象实现的SpringData JPA。
jpa在springboot中应用相当广泛


JPA是Java Persistence API的简称，中文名为Java持久层API，是JDK 5.0注解或XML描述对象－关系表的映射关系，并将运行期的实体对象持久化到数据库中。
JPA包括以下3方面的内容：
（1）一套API标准。在javax.persistence的包下面，用来操作实体对象，执行CRUD操作，框架在后台替代我们完成所有的事情，开发者从烦琐的JDBC和SQL代码中解脱出来。
（2）面向对象的查询语言：Java Persistence QueryLanguage（JPQL）。这是持久化操作中很重要的一个方面，通过面向对象而非面向数据库的查询语言查询数据，避免程序的SQL语句紧密耦合。
（3）ORM（object/relational metadata）元数据的映射。JPA支持XML和JDK5.0注解两种元数据的形式，元数据描述对象和表之间的映射关系，框架据此将实体对象持久化到数据库表中。








--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------



row 行 [rəʊ] 
column 列 ['kɒləm] 



mysql> select * from user;
+-----+----------+-------+----------------+
| uid | password | name  | email          |
+-----+----------+-------+----------------+
|   1 | rpsd     | red   | 136999@101.com |
|   2 | gpwd     | green | 137333@101.com |
|   3 | wpsd     | white | 98766@10.com   |
+-----+----------+-------+----------------+
3 rows in set (0.01 sec)



--------------------------------------------------------------------------------

基础
主键和外键：

主键：关系型数据库中的一条记录中有若干个属性，若其中某一个属性组(注意是组)能唯一标识一条记录，该属性组就可以成为一个主键 
比如  
学生表(学号，姓名，性别，班级) 
其中每个学生的学号是唯一的，学号就是一个主键 
课程表(课程编号,课程名,学分) 
其中课程编号是唯一的,课程编号就是一个主键 
成绩表(学号,课程号,成绩) 
成绩表中单一一个属性无法唯一标识一条记录，学号和课程号的组合才可以唯一标识一条记录，所以 学号和课程号的属性组是一个主键 

外键：
成绩表中的学号不是成绩表的主键，但它和学生表中的学号相对应，并且学生表中的学号是学生表的主键，则称成绩表中的学号是学生表的外键 
同理 成绩表中的课程号是课程表的外键 

定义主键和外键主要是为了维护关系数据库的完整性，总结：
主键是能确定一条记录的唯一标识
外键用于与另一张表的关联


--------------------------------------------------------------------------------

数据类型：
Text		用于文本或文本与数字的组合。最多 255 个字符。	 

Memo		Memo 用于更大数量的文本。最多存储 65,536 个字符。注释：无法对 memo 字段进行排序。不过它们是可搜索的。

Byte		允许 0 到 255 的数字。	1 字节

Integer		允许介于 -32,768 到 32,767 之间的数字。	2 字节

Long		允许介于 -2,147,483,648 与 2,147,483,647 之间的全部数字	4 字节

Single		单精度浮点。处理大多数小数。	4 字节

Double		双精度浮点。处理大多数小数。	8 字节

Currency	用于货币。支持 15 位的元，外加 4 位小数。提示：您可以选择使用哪个国家的货币。8 字节

AutoNumber	AutoNumber 字段自动为每条记录分配数字，通常从 1 开始。	4 字节

Date/Time	用于日期和时间	8 字节

Yes/No		逻辑字段，可以显示为 Yes/No、True/False 或 On/Off。在代码中，使用常量 True 和 False （等价于 1 和 0）注释：Yes/No 字段中不允许 Null 值。1 比特

Ole Object	可以存储图片、音频、视频或其他 BLOBs (Binary Large OBjects)	最多 1GB

Hyperlink	包含指向其他文件的链接，包括网页。	 

Lookup Wizard	允许你创建一个可从下列列表中进行选择的选项列表。	


--------------------------------------------------------------------------------



SQL 命令


创建表：
CREATE TABLE 语句的基本语法如下：
CREATE TABLE database_name.table_name(
   column1 datatype  PRIMARY KEY(one or more columns),
   column2 datatype,
   column3 datatype,
   .....
   columnN datatype,
);
实例：
CREATE TABLE COMPANY(
   ID INT PRIMARY KEY     NOT NULL,
   NAME           TEXT    NOT NULL,
   AGE            INT     NOT NULL,
   ADDRESS        CHAR(50),
   SALARY         REAL
);
CREATE TABLE MyDataTable(
  id INT PRIMARY KEY NOT NULL,
  name TEXT NOT NULL
);

-------------------------

插入语句：
INSERT INTO 表名称 VALUES (值1, 值2,....)
也可以指定所要插入数据的列：
INSERT INTO table_name (列1, 列2,...) VALUES (值1, 值2,....)

例如：
INSERT INTO MyDataTable VALUES (101, 'nameB'), (102, 'nameC');


-------------------------

查询语句：
SQL SELECT 语法
SELECT 列名称 FROM 表名称
以及：
SELECT * FROM 表名称

例如：
SELECT LastName,FirstName FROM Persons
SELECT * FROM MyDataTable


-------------------------

更新语句
UPDATE 表名称 SET 列名称 = 新值 WHERE 列名称 = 某值

实例1：
更新某一行中的一个列
UPDATE Person SET FirstName = 'Fred' WHERE LastName = 'Wilson' 

实例2：
更新某一行中的若干列
UPDATE Person SET Address = 'Zhongshan 23', City = 'Nanjing'
WHERE LastName = 'Wilson'

实例3：
UPDATE MyDataTable SET name='nameABC' WHERE id = 103;



-------------------------

删除语句
DELETE FROM 表名称 WHERE 列名称 = 值

实例：
删除一行
DELETE FROM MyDataTable WHERE id=103

删除所有行
可以在不删除表的情况下删除所有的行。这意味着表的结构、属性和索引都是完整的：
DELETE FROM table_name
或者：
DELETE * FROM table_name



-------------------------

其他语句：

SQL SELECT DISTINCT 语句
在表中，可能会包含重复值。这并不成问题，不过，有时您也许希望仅仅列出不同（distinct）的值。
关键词 DISTINCT 用于返回唯一不同的值。
语法：
SELECT DISTINCT 列名称 FROM 表名称



AND 和 OR 运算符
AND 和 OR 可在 WHERE 子语句中把两个或多个条件结合起来。
如果第一个条件和第二个条件都成立，则 AND 运算符显示一条记录。
如果第一个条件和第二个条件中只要有一个成立，则 OR 运算符显示一条记录。
例如：
SELECT * FROM Persons WHERE FirstName='Thomas' AND LastName='Carter'
SELECT * FROM Persons WHERE FirstName ='Thomas' OR LastName ='Carter'
结合 AND 和 OR 实例，使用圆括号来组成复杂的表达式）:
SELECT * FROM Persons WHERE (FirstName='Thomas' OR FirstName='William') AND LastName='Carter'



ORDER BY 语句
ORDER BY 语句用于根据指定的列对结果集进行排序。
ORDER BY 语句默认按照升序对记录进行排序。
如果您希望按照降序对记录进行排序，可以使用 DESC 关键字。
实例 1
以字母顺序显示公司名称：
SELECT Company, OrderNumber FROM Orders ORDER BY Company
实例 2
以字母顺序显示公司名称（Company），并以数字顺序显示顺序号（OrderNumber）：
SELECT Company, OrderNumber FROM Orders ORDER BY Company, OrderNumber
实例 3
以逆字母顺序显示公司名称：
SELECT Company, OrderNumber FROM Orders ORDER BY Company DESC
实例 4
以逆字母顺序显示公司名称，并以数字顺序显示顺序号：
SELECT Company, OrderNumber FROM Orders ORDER BY Company DESC, OrderNumber ASC


---------------------------------------------------------------------------


SQLite 命令：

创建或者使用数据库：
sqlite3 DatabaseName.db


进入到一个有 数据库的目录中，
1, sqlite3 命令进入到sqlite3执行程序中
2, .open db.sqlite3 打开数据库
3, .databases 显示当前打开的数据库文件
4, .exit 退出交互模式
5, .help 列出命令的提示信息，可供于查阅。
6, .table 查询所有表
7, .schema + 表名    查询表结构



查看 表polls_question 的所有数据
select * from polls_question;

注意：在sqlite3 DatabaseName.db之后，SQLite的命令提示符下，既可以用 一个. 加上具体命令语句 的形势操作数据库，
也可以使用SQL语言去操作数据库，区别是SQL语言要 以分号;结尾


---------------------------------------------------------------------------


MySQL:

MAC 上的配置，在MAC上使用mysql需要安装 mysql，接着配置mysql的环境变量。

终端命令行操作：

登录命令：

mysql -u root -p
Enter password:password

mysql -h localhost -u root -p password

mysql -h 127.0.0.1 -u root -p password

-h后面加的是IP地址，可以用于远程登录，127.0.0.1是本地IP地址，localhost同理。
-u 后面加的是用户名，root是默认用户名，root是超级用户，安装mysql之后就存在的用户
实测过，-p后面也可以不接密码，会要求再次输入密码，终端下密码是隐藏的，不会打印出来
都可以接密码，不过密码就是明文的。

安装完成之后，mysql的默认端口号是  3306
登录命令还可以接端口号：
mysql -u root -P 3307 -h 101.200.152.192 -p


mysql导入其他已经创建的数据库文件
在MySQL Qurey Brower中直接导入*.sql脚本，是不能一次执行多条sql命令的，在mysql中执行sql文件的命令：
mysql> source   d:/myprogram/database/db.sql;


本数据库的查看编码
show variables like 'char%';
show variables like '%char%';


查看表编码
show create table <表名>;
例：show create table user;
查看字段编码
show full columns from <表名>;
例： show full column from user;


修改编码
set character_set_client=utf8;
set character_set_connection=utf8;
set character_set_database=utf8;
set character_set_results=utf8;
set character_set_server=utf8;
set character_set_system=utf8;
set collation_connection=utf8;
set collation_database=utf8;
set collation_server=utf8;

修改编码格式
修改数据库编码格式
alter database <数据库名> character set utf8mb4;
例：alter database db_user character set utf8mb4;
修改表编码
alter table <表名> character set utf8mb4;
例：alter table user character set utf8mb4;
修改字段编码
ALTER TABLE <表名> MODIFY COLUMN <字段名> <字段类型> CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
例：ALTER TABLE comment MODIFY COLUMN content VARCHAR(512) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;


mysql时区问题：
登录mysql，执行命令处理，重启后失效
设置时间为东八区：
> set global time_zone = '+8:00'; ##修改mysql全局时区为北京时间，即我们所在的东8区
> set time_zone = '+8:00'; ##修改当前会话时区
> flush privileges; #立即生效
查看时区：
select curtime();或者select now();

通过修改/etc/my.cnf文件来处理
Windows下是my.ini（C:\ProgramData\MySQL\MySQL Server 8.0\my.ini）
修改方法：
# vim /etc/my.cnf ##在[mysqld]区域中加上
default-time_zone = '+8:00'
# /etc/init.d/mysqld restart ##重启mysql使新时区生效
Windows下的mysql重启，可以在管理->服务 找到mysql，右键，点击重启

导出数据库
mysqldump -u root -p db_name > test_db.sql
导入数据库


--------------------------

登录之后，输入命令之前会带有的前缀:  mysql> 
所有输入的命令都要以 ; (分号) 结尾

MySQL的命令不分大小写

退出登录
mysql> quit;
mysql> exit;

查看命令
mysql> help;
mysql> \h

查看端口号
show global variables like 'port';
show variables like 'port';

查看所有数据库
show databases;

创建一个名为 mytestDB 的数据库
create database mytestDB;
删除该数据库
drop database mytestDB;

使用/选择一个数据库，会打印出来一些信息，
选择中之后，就可以执行创建表，以及对表的增删改查操作。
mysql> use mytestDB;
Database changed

打印所有的表
show tables;

查看表结构：
desc table_name;

自带四个默认数据库：
information_schema、mysql、performance_schema、sys

修改字段名
alter table pms_sku_image change column spuImgId spu_img_id bigint(20);

--------------------------

数据类型：
有其他数据库都有的 整型，浮点型，字符型，时间和日期型
还有 大整型 bigint  ，文本 text  可以存放巨大的字符数量，长文本型 longtext  等等多达几十种的数据类型


基本操作：
创建表， 表名是 myName，id不为空、主键、自增长；name 不为空；phone 不为空
create table myName(id int(8) not null primary key auto_increment, name char(20) not null, phone char(20) not null);

修改字段为自增


删除表
DROP TABLE 表名;
drop table name;

插入数据
insert into myName (id, name, phone) values (1, "red", "136999"), (2, "green", "137333");
id 如果是自增长可以不用指定
insert into myName (name, phone) values ("white", "136098");

删除:
delete from myName where id=1;

更新：
update myName set name="blue" where id=2

加一列数据：
alter table user add column password varchar(255) not null after uid;

查看数据
select * from myName;
查看一列数据
select name from myName;
取前十行
select * from myName limit 0,10;
条件过滤：
mysql> select * from myName where id=1;
并且条件过滤
mysql> select * from myName where id=1 and name="red";
组合过滤，加括号
select * from myName where (id=1 and name="red") or (id=3 and name="white");
查询user表中的 两列数据name，email，会展示这两列的全部数据
select name, email from user;

------------------------------------------------------------------------------

MySql加外键的几个例子：
CREATE TABLE Orders
(
Id_O int NOT NULL,
OrderNo int NOT NULL,
Id_P int,
PRIMARY KEY (Id_O),
FOREIGN KEY (Id_P) REFERENCES Persons(Id_P)
)

还可以加别名fk_PerOrders：
CREATE TABLE Orders
(
Id_O int NOT NULL,
OrderNo int NOT NULL,
Id_P int,
PRIMARY KEY (Id_O),
CONSTRAINT fk_PerOrders FOREIGN KEY (Id_P)
REFERENCES Persons(Id_P)
)

加了别名之后可以用别名删除该外键：
ALTER TABLE Orders
DROP FOREIGN KEY fk_PerOrders

注意，当表已经存在时，也可以加外键：
ALTER TABLE Orders
ADD FOREIGN KEY (Id_P)
REFERENCES Persons(Id_P)

--------------------------

增加唯一性约束：
alter table tableName add unique(column_name);

查看约束
show keys from tableName;

删除唯一性约束
然后可以使用DROP INDEX：
DROP INDEX index_name ON tbl_name
或ALTER TABLE语法：
ALTER TABLE tbl_name DROP INDEX index_name
ALTER TABLE user DROP INDEX name;

--------------------------

查询多张表格

最基本的多表格查询：
select  字段1,字段2... from 表1,表2... [where 条件]
注意: 如果不加条件直接进行查询,则会出现以下效果,这种结果我们称之为 笛卡尔乘积
#查询人员和部门所有信息
select * from person,dept;


多表格查询加where关键字判断：
#查询人员和部门所有信息，把两个表中的某个字段id作为条件判断是否相同
select * from person,dept where person.did = dept.did;
#注意: 多表查询时,一定要找到两个表中相互关联的字段,并且作为条件使用


多表连接查询，语法：
SELECT 字段列表
    FROM 表1  INNER|LEFT|RIGHT JOIN  表2
ON 表1.字段 = 表2.字段;
有三种连接方法，INNER JOIN，LEFT JOIN，RIGHT JOIN ，最后要加上关键字on

内连接查询 (只显示符合条件的数据)
#查询人员和部门所有信息
select * from person inner join dept on person.did = dept.did;
效果: 可以发现, 内连接查询与多表联合查询的效果是一样的，即使用where也可以达到一样的效果

左外连接查询 (左边表中的数据优先全部显示)
#查询人员和部门所有信息
select * from person left join dept on person.did = dept.did;
效果:人员表中的数据全部都显示,而 部门表中的数据符合条件的才会显示,不符合条件的会以 null 进行填充.

右外连接查询 (右边表中的数据优先全部显示)
#查询人员和部门所有信息
select * from person right join dept on person.did =dept.did;
效果:正好与[左外连接相反]

全连接查询：是在内连接的基础上增加 左右两边没有显示的数据
　　注意: mysql并不支持全连接 full JOIN 关键字
　　注意: 但是mysql 提供了 UNION 关键字.使用 UNION 可以间接实现 full JOIN 功能
#查询人员和部门的所有数据
SELECT * FROM person LEFT JOIN dept ON person.did = dept.did
UNION
SELECT * FROM person RIGHT JOIN dept ON person.did = dept.did;

--------------------------

别名
多表查询时，表名太长或者表格太多，可以取一个别名进行查询：

为orders表取别名o，查询30001订单的下单日期，SQL语句如下
mysql> select * from orders as o
    -> where o.o_num = 30001;
	
为customers和orders表分别取别名，并进行连接查询，SQL语句如下：
mysql> select c.c_id,o.o_num
    -> from customers as c left join orders as o
    -> on c.c_id = o.c_id;
	
	
别名似乎可以在表格后面直接加一个空格然后写别名，例如
 from customers ct
相当于之后用ct可以表示customers这张表

--------------------------

if关键字，IF()函数：
mysql> select id,if(id>2,'ok', 'no') from pms_base_sale_attr;
+----+---------------------+
| id | if(id>2,'ok', 'no') |
+----+---------------------+
|  1 | no                  |
|  2 | no                  |
|  3 | ok                  |
|  4 | ok                  |


把if()取别名为isChecked
mysql> select id, if(id>2,'ok', 'no') as isChecked from pms_base_sale_attr;
+----+-----------+
| id | isChecked |
+----+-----------+
|  1 | no        |
|  2 | no        |
|  3 | ok        |
|  4 | ok        |




------------------------------------------------------------------------------

以下表格配合MyBatis使用，MyBatis无法自动创建表格。
重点关注，外键的添加：

一对多关系，一个user可以持有多个boat，所以boat中有user的id字段
user表 用户表
 uid 主键，自增
 name
 email

boat表 请求表
 bid 主键，自增
 uid 外键，绑定一个uid，表示这一行boat是哪个user持有的
 name
 method 请求方式 get/post
 head 请求头
 body 请求体，可以指向一个url链接，也可以是具体的 字符串内容

注意，这里先创建好两个表格user和boat，再将boat的uid字段设置为外键：
create table user( uid int not null primary key auto_increment, name varchar(255) not null, password varchar(255) not null, email varchar(255) not null );
create table boat( bid int not null primary key auto_increment, uid int not null, name varchar(255) not null, method varchar(255) not null, head text, body longtext );

设置外键，别名为id_for_user：
ALTER TABLE boat
ADD CONSTRAINT id_for_user
FOREIGN KEY (uid)
REFERENCES user(uid)

在user表中插入测试数据：
insert into user (uid, password, name, email) values (1, "rpsd", "red", "136999@101.com"), (2, "gpsd", "green", "137333@101.com");

在boat表中，插入测试数据：
mysql> insert into boat (bid, uid, name, method) values (101, 1, "postTest", "get");
Query OK, 1 row affected (0.00 sec)

mysql> insert into boat (bid, uid, name, method) values (123, 2, "postTest", "get");
Query OK, 1 row affected (0.05 sec)

因为设置了外键，所以如果插入了uid不对的数据会报错，例如：
mysql> insert into boat (bid, uid, name, method) values (102, 100, "postTest", "get");
ERROR 1452 (23000): Cannot add or update a child row: a foreign key constraint fails (`springtestdb`.`boat`, CONSTRAINT `id_for_user` FOREIGN KEY (`uid`) REFERENCES `user` (`uid`))


删除数据，失败，因为存在外键关系：
mysql> delete from user where uid=1;
ERROR 1451 (23000): Cannot delete or update a parent row: a foreign key constraint fails (`springtestdb`.`boat`, CONSTRAINT `id_for_user` FOREIGN KEY (`uid`) REFERENCES `user` (`uid`))
 
解决办法：
1. 可以先删除boat表中的  uid=1的行，接着再删除 user表中的数据
2. 添加外键时，设置级联删除  ON DELETE CASCADE; 
删除外键关系：
ALTER TABLE boat DROP FOREIGN KEY id_for_user;
设置级联删除，之后，如果对表user有删除操作，那么boat表中的对应数据会被删除
ALTER TABLE boat ADD CONSTRAINT id_for_user FOREIGN KEY (uid) REFERENCES user(uid) ON DELETE CASCADE; 

delete from user where uid=1;
此时两个表中此时uid为1的行都被删除。

delete from boat where bid=123;
user表中的数据，不会受boat中的数据被删除的影响

------------------------------------------------------------------------------------------------------------------------------------------------


索引

一般情况下，百万量级需要用索引

现在创建一个表CREATE TABLE test_tab (id INT, name VARCHAR(10), age INT, val VARCHAR(10));

查询 SELECT * FROM test_tab WHERE name = 一个外部输入的数据

如果增加一个索引，在 name 上面 建立了索引CREATE INDEX idx_test4_name ON test_tab (name );
之后查询速度会变快

但是如果用age去查，SELECT * FROM test_tab WHERE age = 25，速度不会变快，因为创建的是name的索引，而age上面没有索引

 WHERE 里面的条件， 会自动判断，有没有 可用的索引，如果有， 该不该用。
多列索引，就是一个索引，包含了2个字段。
例如：CREATE INDEX idx_test_name_age ON test_tab (name, age);那么SELECT * FROM test_tabWHEREname LIKE '张%'
AND age = 25
这样的查询，将能够使用上面的索引。

------------------------------

以下情况时，索引会生效：
对于某个条件进行范围查找时，如果这个列上有索引，且使用 where ... between 
and ... > ,< 等范围操作，那么可能用到索引范围查找，如果索引范围查找的成本太高，数据库可能会选择全表扫描的方式
注意 in  不属于范围查找的范畴

就目前来说，mysql 暂时只支持最左前缀原则进行筛选。
例子：创建复合索引
create index idx_a_b_c on tb1(a,b,c)
只有使用如下条件才可能应用到这个复合索引
1.where a=?
2.where a = ? and b = ?
3.where a = ? and b = ? and c = ?
但
4.where a = ? and c ＝ ？
只会使用到mysql 索引 a 列的信息

复合索引的创建可以根据具体业务的需求去创建。


------------------------------

创建索引有几种方式

1.Create关键字创建索引
CREATE INDEX indexName ON table_name (column_name)
如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。

2.修改表结构(添加索引)
ALTER table tableName ADD INDEX indexName(columnName)
ALTER其实就是修改的意思

3.创建表的时候直接指定
CREATE TABLE mytable(  
ID INT NOT NULL,   
username VARCHAR(16) NOT NULL,  
INDEX [indexName] (username(length))  
);  

4.删除索引的语法
DROP INDEX [indexName] ON mytable; 
Drop就是修改表结构的关键字

-----------------------------

mysql有这几种索引

1.添加PRIMARY KEY（主键索引） 
mysql>ALTER TABLE `table_name` ADD PRIMARY KEY ( `column` ) 

2.添加UNIQUE(唯一索引) 
mysql>ALTER TABLE `table_name` ADD UNIQUE ( `column` ) 

3.添加INDEX(普通索引) 
mysql>ALTER TABLE `table_name` ADD INDEX index_name ( `column` ) 

4.添加FULLTEXT(全文索引) 
mysql>ALTER TABLE `table_name` ADD FULLTEXT ( `column`) 

5.添加多列索引 
mysql>ALTER TABLE `table_name` ADD INDEX index_name ( `column1`, `column2`, `column3` )



------------------------------------------------------------------------------------------------------------------------------------------------


MySQL 5.0 版本开始支持存储过程。

存储过程（Stored Procedure）是一种在数据库中存储复杂程序，以便外部程序调用的一种数据库对象。
存储过程是为了完成特定功能的SQL语句集，经编译创建并保存在数据库中，用户可通过指定存储过程的名字并给定参数(需要时)来调用执行。

说白了，存储过程就是 SQL语言的代码封装与重用。

----------

查看全部存储过程
show procedure status; 

查看单个存储过程的详情，
show create procedure 存储过程名称;
例如可以查看到他的编码格式，他的sql模式，最重要的是可以查看他的 SQL语句集。
知道了他的SQL语句集，就可以知道这个 存储过程是执行什么sql语句的，是干什么用的。


其他：
查看全部函数  show function status;
查看单个函数  show create function 函数名称;

----------

CREATE PROCEDURE  过程名([[IN|OUT|INOUT] 参数名 数据类型[,[IN|OUT|INOUT] 参数名 数据类型…]]) [特性 ...] 过程体


创建一个简单的存储过程
create procedure testa()
begin
    select * from users;
    select * from orders;
end;

调用存储过程
call testa();   

----------

存储过程的参数：
MySQL存储过程的参数用在存储过程的定义，共有三种参数类型,IN,OUT,INOUT,形式如：

CREATEPROCEDURE 存储过程名([[IN |OUT |INOUT ] 参数名 数据类形...])
IN 输入参数：表示调用者向过程传入值（传入值可以是字面量或变量）
OUT 输出参数：表示过程向调用者传出值(可以返回多个值)（传出值只能是变量）
INOUT 输入输出参数：既表示调用者向过程传入值，又表示过程向调用者传出值（值只能是变量）


例如：
mysql> create table PLAYERS as select * from TENNIS.PLAYERS;
mysql> create table MATCHES  as select * from TENNIS.MATCHES;

删除给定球员参加的所有比赛：
mysql> delimiter $$　　#将语句的结束符号从分号;临时改为两个$$(可以是自定义)
mysql> CREATE PROCEDURE delete_matches(IN p_playerno INTEGER)
    -> BEGIN
    -> 　　DELETE FROM MATCHES
    ->    WHERE playerno = p_playerno;
    -> END$$
Query OK, 0 rows affected (0.01 sec)
 
mysql> delimiter;　　#将语句的结束符号恢复为分号


查询：
mysql> create procedure p3(IN nameid int, OUT person_name varchar(10))  
-> begin  
-> select * from test.zzm;  
-> select zzm.name into person_name from test.zzm where zzm.id = nameid;  
-> end  
-> $  
Query OK, 0 rows affected (0.00 sec) 



------------------------------------------------------------------------------------------------------------------------------------------------

mysql 授权和解除权限
grant命令可以用来创建用户和给用户授权


创建用户：
CREATE USER 'user_name'@'host_name' IDENTIFIED BY 'my password';
指定创建用户账号，格式为 'user_name'@'host_name'。

user_name是用户名。

host_name为主机名，即用户连接 MySQL 时所在主机的名字，注意这里指的不是mysql那台机器，是指 当前用户所在的那台机器的名字。
表示要这个新创建的用户允许从哪台机登陆，如果只允许从本机登陆，则 填　‘localhost’ ，如果允许从远程登陆，则填 ‘%’
若在创建的过程中，只给出了账户的用户名，而没指定主机名，则主机名默认为“%”，表示一组主机。

两个例子：
CREATE USER 'dog'@'localhost' IDENTIFIED BY '123456';
CREATE USER 'pig'@'192.168.1.101' IDENDIFIED BY '123456';


使用grant创建用户：
使用GRANT语句
语法：mysql> grant 权限1,权限2,...权限n on 数据库名称.表名称 to 用户名@用户地址 identified by '连接口令';
权限1,权限2,...权限n代表
select,insert,update,delete,create,drop,index,alter,grant,references,reload,shutdown,process,file等14个权限

4个实例：
mysql>grant select,insert,update,delete,create,drop on vtdc.employee to joe@10.163.225.87 identified by '123';
给来自10.163.225.87的 用户joe 分配可对 数据库vtdc 的employee表进行select,insert,update,delete,create,drop等操作的权限，并设定密码为123。

mysql>grant all privileges on vtdc.* to joe@10.163.225.87 identified by '123';
给来自10.163.225.87的用户joe分配可对数据库vtdc所有表进行所有操作的权限，并设定口令为123。

mysql>grant all privileges on *.* to joe@10.163.225.87 identified by '123';
给来自10.163.225.87的用户joe分配可对所有数据库的所有表进行所有操作的权限，并设定口令为123。

mysql>grant all privileges on *.* to joe@localhost identified by '123';
给本机用户joe分配可对所有数据库的所有表进行所有操作的权限，并设定口令为123。




--------------

grant添加权限，revoke删除权限

授予用户所有权限，这可能是你现在最想要的语句
grant all privileges on *.* to vien@'%'
这句话是授予一个已经存在的、用户名为vien的用户，通过所有的host连接都有所有的权限。

添加权限（和已有权限合并，不会覆盖已有权限）
GRANT Insert ON `your database`.* TO `user`@`host`;

删除权限
REVOKE Delete ON `your database`.* FROM `user`@`host`;

用户详情的权限列表请参考MySQL官网说明
http://dev.mysql.com/doc/refman/5.7/en/privileges-provided.html

--------------

改密码
方式1，不用登录
格式：mysqladmin -u用户名 -p旧密码 password 新密码 
例子：mysqladmin -uroot -p123456 password 123 

方式2
用SET PASSWORD命令 
登录MySQL。 
格式：mysql> set password for 用户名@localhost = password('新密码'); 
例子：mysql> set password for root@localhost = password('123'); 

------------------------------------------------------------------------------------------------------------------------------------------------


mysqldump

mysql自带工具，用于备份，导出数据。
它的备份原理是通过协议连接到 MySQL 数据库，将需要备份的数据查询出来，将查询出的数据转换成对应的insert 语句，当我们需要还原这些数据时，只要执行这些 insert 语句，即可将对应的数据还原。

命令格式：
mysqldump [选项] --数据库名 [选项 表名] > 脚本名
mysqldump [选项] --all-databases [选项]  > 脚本名

例子，进入mysql/bin下面，打开终端，执行mysqldump，备份远程的数据库next_all 下面的两张表t_org_org和t_meta_form，备份到D盘目录下，生成一个org_meta.sql文件作为备用源
mysqldump -unext -p --host 172.20.165.52 --port 3306 --databases next_all --tables t_org_org t_meta_form >D:/org_meta.sql


选项说明
参数名	缩写	含义
--host	-h	服务器IP地址
--port	-P	服务器端口号
--user	-u	MySQL 用户名
--pasword	-p	MySQL 密码

--databases		指定要备份的数据库
--all-databases		备份mysql服务器上的所有数据库
--compact		压缩模式，产生更少的输出
--comments		添加注释信息
--complete-insert		输出完成的插入语句
--lock-tables		备份前，锁定所有数据库表
--no-create-db/--no-create-info  禁止生成创建数据库语句
--force			当出现错误时仍然继续备份操作
--default-character-set	指定默认字符集
--add-locks		备份数据库表时锁定数据库表





-----------------------------------------

xtrabakackup有2个工具，分别是xtrabakup、innobakupe
MySQL冷备、mysqldump、MySQL热拷贝都无法实现对数据库进行增量备份。在实际生产环境中增量备份是非常实用的，
如果数据大于50G或100G，存储空间足够的情况下，可以每天进行完整备份，如果每天产生的数据量较大，需要定制数据备份策略。
例如每周实用完整备份，周一到周六实用增量备份。而Percona-Xtrabackup就是为了实现增量备份而出现的一款主流备份工具。





------------------------------------------------------------------------------------------------------------------------------------------------



























