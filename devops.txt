
华为devops

个人理解：
说白了就是把项目管理的流程，需求设计规划->开发->测试->部署和发布->运维 这一套流程标准化 规范化 线上云端整合。
迭代时提升一部分效率，迭代速度更快。日常开发中会提升一部分工作效率，不会 做了这个却又忘了那个。
对于开发来说，代码上传时的流水线审查又可以避免一些低级错误，十分有用。


打开华为云的官网，点击左上的产品项就可以看到华为云服务的所有产品，
软件开发云服务：有项目管理、配置管理、流水线、代码检查、编译构建、部署服务、测试管理、发布管理8大服务项。


-------------------------------------------------------------


华为devops，踩过的坑：
官方教程
https://support.huaweicloud.com/qs-devcloud/devcloud_qs_0201.html

(1)在构建jar成功，部署成功，启动springboot项目成功之后，发现访问不了页面，
   原因是 服务器的安全组没有开放8090端口，而实验项目是默认8090端口的。

(2)创建流水线时，选择自定义模板。

(3)自动化部署的步骤：
   1.创建git代码仓库，上传代码，扫描代码质量。
   2.新建一个编译构建任务，编译构建代码并生成jar包，归档jar包路径。
   3.新建一个部署任务，将生成jar至主机组。
     在部署时，可以选择一个编译构建任务，这样就可以不用选择生成的jar包了。
   4.创建流水线，使以上步骤一体自动化，包括：质量扫描、构建、部署。
     创建流水线时，可以选择之前创建的编译构建任务、部署任务。
	 流水线执行完成之后，也可以在编译构建任务或者部署任务 的执行记录里查看。
     尝试过直接部署，没有生效，证明部署时不会自动执行构建任务，需要在部署之前增加一个构建任务。
   5.至此，之后，编写完成代码，push到git仓库，然后执行流水线即可直接部署到云主机。


-------------------------------------------------------------


开发总结

完备的代码提交机制
代码上传以后，扫描codingstylecheck 和 findbugs ，过滤一些代码错误

DevOps自动化发布
DevOps：Development Operations，是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。
它是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。透过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。
它的出现是由于软件行业日益清晰地认识到：为了按时交付软件产品和服务，开发和运维工作必须紧密合作。
IBM，亚马逊，阿里，华为DevCloud 都有对应的平台和产品服务

codingstylecheck、 findbugs、 CodeDex


华为云，云龙，流水线
借鉴亚马逊的理念和经验，开发一系列的工具，从设计、源代码，一直到部署，到生产线的运维，都有一整套的工具来支持，整套的工具链叫云龙(CloudDragon)。

CloudInit
CloudPipeline
CloudCode
CloudBuild
CloudArtifact
Versionset
CloudTest
CloudAnalytics
CloudMonitor
IDEA
ReleaseMan
CloudDeploy
UADP
CloudReq


Jenkins就是其中应用最广泛的一种工具
Jenkins是一个开源软件项目，是基于Java开发的一种持续集成工具，用于监控持续重复的工作，旨在提供一个开放易用的软件平台，使软件的持续集成变成可能。

CloudPipeline(流水线)，是CloudDragon的一种服务，可以在华为云上购买相关服务
对外开放30+服务，提供110+丰富的质量门禁检查项及其门禁模板功能，建立DevOps全流程自动化(从源码到环境上线验证)的服务发布管道，支持服务快速可靠发布。
一套可帮助您为服务快速建立自动化发布管道的流水线服务，实现从代码提交到构建、部署到Alpha/Beta/Gamma环境验证、灰度发布上生产环境，全流程自动化、可视化。
该服务已经集成了多达30+类型的检查活动，您可灵活的自定义发布活动。此外，该服务提供了丰富的质量门禁功能，支持多达110+检查项，您可使用它帮助你管控各阶段出口质量。
通过制定质量门禁模板，推送至团队下所有流水线，达到统一发布出口标准的目的。

CloudPipeline流水线服务是基于微服务的运化流水线服务平台，基于微服务化架构，应用成熟的后端执行平台，提供多场景流水线页面服务，同时提供开发接口给集成者使用，
重点支持对服务化产品的对接，为CD、DevOps、CDE、AI等流程业务提供流水线能力支持




了解一个项目迭代的过程，每一个步骤都要仔细了解
每一个阶段的功能都要说明：

软件开发模型，增量模型

确定版本计划，出具 版本计划表
需求确定 出具 需求设计说明书
需求串讲 项目经理产品经理根据需求说明书讲解大体的需求设计，让开发人员熟悉需求
设计评审 确定每个需求的开发人员
启动开发
UI确认 UI设计师讲解UI的高保真或者低保真设计图，
开发方案评审 开发人员讲解开发方案
ST1 至 ST5 开发人员开始开发
版本归档 启动测试，开始在测试环境上进行需求的功能验证，apk小版本升级
SIT1(或者SDV1)
版本归档 验证第二轮，apk小版本升级，升级版本是为了区分不同的测试阶段中测试的BUG的修复情况
SIT2(或者SDV2)
现网验证 灰度公测，进行局部(公司内部)现网验证，apk小版本升级
众测
版本归档 保存所有开发资料和开发成果(apk应用)
众测回归
测试报告
版本灰度发布


需求说明书的写法：
按照 需求来源，需求背景及业务定位，需求价值分析，需求描述来写
需求来源：
描述需求提出部门及接口人，需求分类（运营需求、优化需求、用户反馈需求、规划需求）
一般情况下来源都是产品经理的设计

需求背景及业务定位：
描述需求的原始诉求，本需求需要解决的问题或期望达到的诉求
这个需求是处于什么环境

需求价值分析：
描述需求给产品带来的价值如KPI提升、用户体验改善提升用户满意度、减少运营工作量等
就是这个需求可以带来什么好处

需求描述：
需求描述很重要，需求的业务逻辑的概括描述，包括适用的范围和场景，对应的业务流程图等
1)	需求参与者（角色）
2)	前置条件
3)	业务流程
4)	界面示意图（UI低保真）
5)	业务功能描述
6)	业务规则
7)	异常业务流程
8)	安全隐私需求
9)	运营需求
10)	后置条件
11)	需求约束
12)	周边依赖 本节详细描述本需求周边依赖，如对其他业务接口需求、权限需求等
13)	兼容性需求
14)	性能需求
15)	国际化需求
16)	备注说明：其他说明
优秀的需求说明有以下特点：
- 完整性：真的把这一需求说清楚了，包含了该功能所有的必要信息。
- 正确性：真的把用户所想的写明白了，这是用户的真正需求。
- 可行性：这个需求是可行的，而不是空中楼阁。
- 必要性：这个需求是业务所需要的，而不是因为某个人很喜欢这个功能。
- 准确性：这个需求的描述真的是清晰的、无二义的。
- 可测性：这个需求是能够通过测试验证的。）




测试流程，测试用例，测试方案

问题单：
DTS对应流程：问题提交人提交问题单，测试(项目)经理审核，开发人员定位(出现次数>=1)，项目经理审核定位，
开发人员实施修改，审核人员审核修改，CMO归档，测试经理组织测试，回归人员回归测试，回归问题单确认


需求单：







