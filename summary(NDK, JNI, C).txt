JNI库就是 .so 文件。

--------------------------------------------------------------------------

JNI是Java Native Interface的缩写，它提供了若干的API实现了Java和其他语言的通信（主要是C&C++）。
NDK 的java和c++就是依赖JNI实现的
JNI头文件
#include <jni.h>

-----------------------

NDK
创建项目（android develop官方有详细文档）
1.在向导的 Configure your new project 部分，选中 Include C++ Support 复选框
2.在向导的 Customize C++ Support 部分，您可以使用下列选项自定义项目：
  C++ Standard：使用下拉列表选择您希望使用哪种 C++ 标准。选择 Toolchain Default 会使用默认的 CMake 设置。

  Exceptions Support：如果您希望启用对 C++ 异常处理的支持，请选中此复选框。如果启用此复选框，Android Studio 会将 -fexceptions 标志添加到模块级 build.gradle 文件的 cppFlags 中，Gradle 会将其传递到 CMake。

  Runtime Type Information Support：如果您希望支持 RTTI，请选中此复选框。如果启用此复选框，Android Studio 会将 -frtti 标志添加到模块级 build.gradle 文件的 cppFlags 中，Gradle 会将其传递到 CMake。

3. 从 IDE 左侧打开 Project 窗格并选择 Android 视图，
   创建完成之后， 生成的工程 将添加 cpp 和 External Build Files 组

4. 如果想要确认 Gradle 是否已将原生库打包到 APK 中，可以使用 APK 分析器：

-----------------------

使用NDK分析：
需要在java代码中加入代码段：
    static {
        System.loadLibrary("native-lib");
    }
 System.loadLibrary() 加载原生库， 这样应用就可以使用库的原生函数

在java代码中加入方法， java代码中，调用stringFromJNI，就相当于调用原生cpp方法：Java_com_myndktest_MainActivity_stringFromJNI
public native String stringFromJNI();


在native-lib.cpp 文件中，加入方法
extern "C"
JNIEXPORT jostling
JNICALL
// 方法的前缀不能写错，后缀是stringFromJNI
Java_com_myndktest_MainActivity_stringFromJNI(
        JNIEnv *env,
        jobject /* this */) {
    std::string hello = "Hello from C++";
    return env->NewStringUTF(hello.c_str());
}


-----------------------
1.在android项目中，如果使用android stadio 来创建工程，
  那么在项目的根目录下的local.properties文件中，会记录sdk和ndk的位置

2.NDK调试，在android studio的SDK manager的sdk tool中选择LLDB并安装，
  对cpp文件进行调试和对java文件调试差不多，都是下断点之后，点击Debug或者Attach debuger
-----------------------

CMake 构建脚本（如果使用android studio 来创建ndk项目，会自动生成构建ndk的文件，直接使用即可）
app文件夹下创建一个名为 CMakeLists.txt 文件。
（如果项目使用的是 ndk-build，则不需要创建 CMake 构建脚本。提供一个指向 Android.mk 文件的路径，将 Gradle 关联到 原生库）

CMake 命令，对构建脚本进行配置。

要指示 CMake 从原生源代码创建一个原生库，添加 
cmake_minimum_required()命令 和
add_library()命令

cmake_minimum_required(VERSION 3.4.1)
add_library( # Specifies the name of the library.
             native-lib

             # Sets the library as a shared library.
             SHARED

             # Provides a relative path to your source file(s).
             src/main/cpp/native-lib.cpp )



Android NDK 提供了一套实用的原生 API 和库。通过将 NDK库 包含到项目的 CMakeLists.txt 脚本文件中，您可以使用这些 API 中的任意一种。
find_library() 命令添加到您的 CMake 构建脚本中以定位 NDK 库，并将其路径存储为一个变量。您可以使用此变量在构建脚本的其他部分引用 NDK 库。
以下示例可以定位 Android 特定的日志支持库并将其路径存储在 log-lib 中：
find_library( # 定义存储NDK库位置的路径变量的名称。
              log-lib

              # 指定NDK库的名称，CMake需要定位
              log )

target_link_libraries 命令 关联（据说，关联之后native-lib可以调用log-lib中的方法）
target_link_libraries( # Specifies the target library.
                       native-lib

                       # Links the log library to the target library.
                       ${log-lib} )

结果：
Cmake生成的库文件都是这种命名: lib库名称.so
可以看到在 build/intermediates/cmake/下看到生成的 libnative-lib.so

---------------------

Android下的 c++开发（创建项目之后的开发）
 导入头文件（这些头文件位于 ndk环境 下）
#include <jni.h>
#include <stdlib.h>
#include <string>

------------------------------------------------------------------------------


C++

#define预处理宏定义，#if条件编译的语法在下面查看

C++函数定义
C++中，有些代码是写在类外面的，这个是C语言的写法，为了兼容C语言，所以C++的函数可以写在类外面。
例如一个cpp文件中，有main函数，以及其他一些函数但是没有类声明和定义，这些都是C语言的写法。

#include只能导入头文件，不能导入cpp文件(编译会报错)

在头文件中声明函数，在cpp文件中定义这个函数，其他cpp文件include头文件就可以使用这个函数了。

如果在cpp文件中声明并定义一个函数，但是没有头文件声明过该函数，该函数是不可以在其他cpp文件中使用的
只能在本cpp文件中使用该函数

在android的NDK开发中，如果使用的是.c文件，可以不用extern "C"，但是如果使用.cpp最好加上extern "C"(表示这一部分代码当做c语言来处理)
写法是：
#include... //导入各种头文件
extern "C"
{
... //所有的函数全写里面
}

如果是 .c文件可以不用写extern "C"，不过头文件.h还是要写的。

------------------------------

c++类声明和定义

分为 （1）在类的内部实现，在类外部实现

内部实现：
和java的写法类似，就是直接在类定义的大括号内写函数的函数体

外部实现：
class Objec
{
private:
    int mNum;  //成员变量
    float mPrice;  //成员变量
protected:
public:
    Objec(); //构造函数
    ~Objec(); //析构函数
    void Get_obj(int num, float price);
};  // 一个类结束后记得加上分号
void Objec::Get_obj(int num, float price)
{
    mNum = num;
    mPrice = price;
}
::叫做作用域解析符，当类的方法在类外部实现时，用来限定该方法是哪一个类的.
外部实现时，方法内可以直接使用类的成员变量。

如果这个类是指针，那么不再用. 而是使用->来访问公有的成员变量和函数

在android开发中，会在.h头文件中声明类，写好成员变量和成员函数，在.cpp文件中外部实现成员函数

----------------------------------------------------------------

C++生成可执行程序的过程：

(1)预编译：
即预处理，主要处理在源代码文件中以“#”开始的预编译指令，如宏展开、处理条件编译指令、处理#include指令等。
例如 #include 引入的头文件依赖，把头文件的内容加载到#include的位置

(2)编译：
就是把预处理完的文件进行一系列词法分析、语法分析、语义分析以及优化后生成相应的汇编代码文件。

词法分析阶段是编译过程的第一个阶段。这个阶段的任务是从左到右一个字符一个字符地读入源程序，
即对构成源程序的字符流进行扫描然后根据构词规则识别单词(也称单词符号或符号)。
词法分析程序实现这个任务。词法分析程序可以使用lex等工具自动生成。

语法分析是编译过程的一个逻辑阶段。语法分析的任务是在词法分析的基础上将单词序列组合成各类语法短语，如“程序”，“语句”，“表达式”等等.
语法分析程序判断源程序在结构上是否正确.源程序的结构由上下文无关文法描述.

(3)汇编：
将汇编代码转变成二进制文件
语义分析是编译过程的一个逻辑阶段. 语义分析的任务是对结构上正确的源程序进行上下文有关性质的审查, 进行类型审查.例如一个C程序片断:
int arr[2],b;
b = arr * 10; 
源程序的结构是正确的. 
语义分析将审查类型并报告错误:不能在表达式中使用一个数组变量,赋值语句的右端和左端的类型不匹配.


(4)链接，链接分 静态链接和动态链接，静态链接 链接的就是静态库，动态链接 链接的就是动态库。
将二进制文件链接成一个可执行的命令，主要是把分散的数据和代码收集并合成一个单一的可加载并可执行的的文件。
链接可以发生在代码静态编译、程序被加载时以及程序执行时。链接过程的主要工作是符号解析和重定位。


(5)静态库与动态库

库是一组目标文件的包，就是一些最常用的代码编译成目标文件后打包存放。而最常见的库就是运行时库（Runtime Library）,如C运行库CRT.

库是写好的现有的，成熟的，可以复用的代码。现实中每个程序都要依赖很多基础的底层库，不可能每个人的代码都从零开始，因此库的存在意义非同寻常。
本质上来说库是一种可执行代码的二进制形式，可以被操作系统载入内存执行。库有两种：静态库（.a、.lib）和动态库（.so、.dll）
linux下是.a和.so, windows下是.lib和.dll。

静态库
之所以成为【静态库】，是因为在链接阶段，会将汇编生成的目标文件.o与引用到的库一起链接打包到可执行文件中。因此对应的链接方式称为静态链接。
静态库特点总结：
静态库对函数库的链接是放在编译时期完成的。
程序在运行时与函数库再无瓜葛，移植方便。
浪费空间和资源，因为所有相关的目标文件与牵涉到的函数库被链接合成一个可执行文件。

动态库在程序编译时并不会被连接到目标代码中，而是在程序运行是才被载入。不同的应用程序如果调用相同的库，那么在内存里只需要有一份该共享库的实例，
规避了空间浪费问题。动态库在程序运行是才被载入，也解决了静态库对程序的更新、部署和发布页会带来麻烦。用户只需要更新动态库即可，增量更新。

动态库把对一些库函数的链接载入推迟到程序运行的时期。
可以实现进程之间的资源共享。（因此动态库也称为共享库）
将一些程序升级变得简单。
甚至可以真正做到链接载入完全由程序员在程序代码中控制（显示调用）。
Window与Linux执行文件格式不同，在创建动态库的时候有一些差异。
在Windows系统下的执行文件格式是PE格式，动态库需要一个DllMain函数做出初始化的入口，通常在导出函数的声明时需要有_declspec(dllexport)关键字。
Linux下gcc编译的执行文件默认是ELF格式，不需要初始化入口，亦不需要函数做特别的声明，编写比较方便。
与创建静态库不同的是，不需要打包工具（ar、lib.exe），直接使用编译器即可创建动态库。

静态库在程序编译时会被连接到目标代码中，程序运行时将不再需要该静态库，因此体积较大。
动态库在程序编译时并不会被连接到目标代码中，而是在程序运行是才被载入，因此在程序运行时还需要动态库存在，因此代码体积较小。

------------------------------------------------------------------------------

#define A 0
宏定义，0宏定义为A，宏定义无法改值

条件编译
条件编译是C语言中预处理部分的内容，它是编译器编译代码时最先处理的部分，
条件编译里面有判断语句
如果宏条件符合，编译器就编译这段代码，否则，编译器就忽略这段代码而不编译，

#define     定义一个预处理宏
#undef      取消宏的定义

#if         编译预处理中的条件命令，相当于C语法中的if语句，如果通过判断，该if下的语句将被编译器执行
#ifdef      判断某个宏是否被定义，若已定义，执行随后的语句
#ifndef     与#ifdef相反，判断某个宏是否未被定义
#elif       若#if, #ifdef, #ifndef或前面的#elif条件不满足，则执行#elif之后的语句，相当于C语法中的else-if
#else       与#if, #ifdef, #ifndef对应, 若这些条件不满足，则执行#else之后的语句，相当于C语法中的else
#endif      #if, #ifdef, #ifndef这些条件命令的结束标志.
defined     与#if, #elif配合使用，判断某个宏是否被定义

#ifdef和#endif必须成对使用。   
从理论上讲可以出现在任何地方（头文件和实现文件中）  

例1
#define OPTIMIZE_WRITES 1 //把OPTIMIZE_WRITES定义为1
#if (OPTIMIZE_WRITES > 1)
printf("OPTIMIZE_WRITES > 1"); //编译器没有编译该语句,该语句不生成汇编代码
#elif (OPTIMIZE_WRITES == 1)
printf("OPTIMIZE_WRITES == 1"); //编译器编译了这段代码，且生成了汇编代码，执行该语句
#else
printf("OPTIMIZE_WRITES 