idea快键：ctrl+o   添加方法(overide method)
idea快键：ctrl+i   添加抽象和接口方法(implements method)
idea快键：alt+insert   添加get和set方法
idea快键：ctrl+shift+/   xml注释 
idea快键：ctrl+alt+L   格式化代码（自动对齐） 
idea快键：ctrl+P   参数提示 parameter info


idea 黑色风格：file -> settings -> appearance -> Theme,选择darcula



Linux 终端个人常用命令：
查找：grep -Irn yourSearchWord .

多命令执行，用 ; 分号隔开，无论前边的命令执行成功与否都会继续执行下一条命令：
echo 1; echoo 2; echo 3; echo 4


window:alt+F4  关闭当前窗口
window:window+m  所有窗口最小化

sourcetree: http://www.56.com/u46/v_MTA3NjQ0MzYz.html?qq-pf-to=pcqq.c2c


vim:
:wq   退出，在vim的普通模式（移动光标模式）下，冒号加wq即可

<Ctrl-d>：向下移动半屏。
<Ctrl-u>：向上移动半屏。

gg：到文件首
^ (shift+6)移动到行首
$ (shift+4)移动到行尾
0 (数字0)移动到本行第一个字符上
* (shift+8)搜索功能：跳的与当前光标所在单词相同的下一个单词
% (shift+5)括号跳转功能，可以跳转当前光标所在的括号对应的另一个括号上

i：在当前字符的左边插入
a：在当前字符的右边插入（比i好用）
A：在当前行尾插入
O：在当前行上面插入一个新行

v：按字符选择。经常使用的模式，所以亲自尝试一下它。
V(shift+v)：按行选择。这在你想拷贝或者移动很多行的文本的时候特别有用。

ctrl + q：列选择

选中一列之后
shift + i 
输入字符"k"
双击 esc键
会在所有的选中列前输入字符串"k"


d：剪贴选择的内容到剪贴板。
dd:剪切单行
y：拷贝选择的内容到剪贴板。

粘贴很简单，按 p。

w 向前移动一个单词

b 向后移动一个单词 

> 全选缩进


adb shell 命令略等于linux 终端命令，即大部分命令的相同的，是只能运行在android机器上的命令，例如在android机器上复制目录、文件到android机器上的另一个目录
而adb 命令则不同于linux 终端命令，可以用于android机器于编译环境（电脑）的交互，例如从android机器上复制文件到电脑上

adb 命令
adb shell dumpsys activity | grep "mFocusedActivity"   //linux下命令行，查看当前activity

adb shell dumpsys activity | findstr "mFocusedActivity"   //windows下命令行，查看当前activity


adb shell am start -n breakan.test/breakan.test.TestActivity //启动activity


adb shell su 获取权限，可以查看data目录下的文件,只有root的手机可以使用 su 命令

adb pull  从真机上拷贝文件到PC上
adb push  从PC上复制一份文件到的手机机上

adb shell am force-stop com.my.app.package 停止一个app


使用 adb shell 命令， 查看data/data下文件夹时，如果不能查看，则必须使用root手机，并且使用 su 命令

使用adb shell 命令复制文件夹或者文件时，也必须使用root手机，使用 su 命令，使用cp命令
例如cp -r /tmp/a /root/a （cp [选项] 源文件或目录 目的文件或目录）
首先使用cp命令将文件复制在sd卡上，然后在直接使用usb数据线将文件复制在电脑上

(进入到 /data/data下的一个文件夹内，把名为files的文件夹复制到 内置存储器的根目录下，
	在解决实际问题当中，发现android机器上不可以使用 intent 把 /data/data/app 下的图片分享出去，因为其他的分享接收应用没法获取该文件)
// 要复制文件夹要加 -r
	cp -r files ../../../mnt/sdcard/

删除apk
adb uninstall apkName

在手机中导出apk
查看所有的apk包名
adb shell pm list packages
选择一个apk包名，打印出路径
adb shell pm path com.mms.emojiplugin.twemoji
将打印出的路径作为参数，导出一个apk包，第三个参数为上一个命令的输出，第四个参数为apk的保存路径
adb pull /data/app/com.mms.emojiplugin.twemoji-1/base.apk ./com.mms.emojiplugin.twemoji-1.apk



有时需要将data/data下的文件导出，由于没有权限无法导出，
方法一:使用cp 命令将data/data下的文件复制到sdcard上，再使用pull命令导出
方法二:使用 豌豆荚 导出，如果不能导出，使用 豌豆荚 root ，再导出


git 命令：
git log 查看commit
git add --all 加入所有的，提交之前要执行 
git commit -m "" 提交 ""中写备注
git push origin master 提交到远程仓库，注意master是主分支，有时分支不一样
git commit --amend  修改提交的备注
git pull origin master 下载远程仓库，origin远程仓库名，master远程分支名

git diff 查看当前修改的代码，红色为删除的代码并带有"-"(减号)，绿色为增加的代码并带有"+"(加号)，git add 命令之前可以使用
git diff > patch.diff  把当前diff的内容导入到patch.diff文本文件中，patch.diff位于当前使用git命令的目录中

git reset --hard commitId  回滚到某个commit，使用git log可以查看commitId
git reset . 将所有的add内容回滚
git reset HEAD filename 将单个add内容回滚

git status        add前可以执行，查看修改了哪些文件，add之后也可以查看，add了哪些文件
git checkout .             未add时回滚所有文件
git checkout filename      未add时回滚单个文件

注：分支问题，commit 会把当前修改提交到当前分支，当commit之后再切换其他分支，修改的代码会还原
git branch -a   查看当前所有分支，前缀带*为当前分支
git branch master2  创建master2本地分支
git branch origin/master2  创建master2分支，origin远程仓库名，master2为分支名(repository/branch)
git checkout origin/master2  切换到分支
git branch -d xxxxx  删除本地分支

// 切换到master分支，在master分支上把develop分支的内容合并过来
git checkout master
git merge develop

git show commitId  查看某个commitId的提交内容

// 将本地的git仓库绑定地址为git://127.0.0.1/abc.git 的一个远程仓库
git remote add origin git://127.0.0.1/abc.git

//本地创建的仓库关联远程仓库
git init 创建一个本地git仓库
git add README.md 添加一个README.md文件
git commit -m "first commit" 第一次提交
git remote add origin https://github.com/wuruixiong/WRXDocument.git  将这个仓库和远程仓库绑定
git push -u origin master  提交到远程仓库

将已有的仓库和远程仓库绑定:
git remote add origin https://github.com/wuruixiong/WRXDocument.git
git push -u origin master

删除所有未追踪文件(untracked files)
git clean -f


可以查看已add未commit的diff，新加文件可以看到diff
git diff HEAD

已经commit未提交到远程，和远程当前的master-rel分支对比
git diff origin/master-rel HEAD

远程仓库改名之后，对本地仓库先删除远程，再加入新的uri
git remote rm origin
git remote add origin [url]


// 可以查看所有分支的所有操作记录
// 本人主要用来查看 分支合并记录
git reflog
// 回滚提交前的版本
git reset --hard HEAD~
				
				
git reflog 例如：

fbb0c0f HEAD@{0}: commit (merge): Merge branch 'master' into my-branch
43b6032 HEAD@{1}: checkout: moving from master to my-branch
e3753a7 HEAD@{2}: rebase finished: returning to refs/heads/master
e3753a7 HEAD@{3}: pull --rebase: checkout e3753a71d92b032034dcb299d2df2edc09b5830e
b41ea52 HEAD@{4}: reset: moving to HEAD^
8400a0f HEAD@{5}: rebase: aborting

回滚到分支合并之前
git reset --hard 43b6032
				
				
git revert 是生成一个新的提交来撤销某次提交，此次提交之前的commit都会被保留
git reset 是回到某次提交，提交及之前的commit都会被保留，但是此次之后的修改都会被退回到暂存区
				
				
Git必须知道当前版本是哪个版本，在git中，用HEAD表示当前版本，也就是最新的提交3628164...882e1e0（注意我的提交ID和你的肯定不一样），
上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。
				
HEAD 就是当前活跃分支的游标。形象的记忆就是：你现在在哪儿，HEAD 就指向哪儿，所以 Git 才知道你在那儿！
不过 HEAD 并非只能指向分支的最顶端（时间节点距今最近的那个），实际上它可以指向任何一个节点，它就是 Git 内部用来追踪当前位置的。


打标签
git tag -a v1.01 -m "Relase version 1.01"
注解：git tag 是打标签的命令，-a 是添加标签，其后要跟新标签号，-m 及后面的字符串是对该标签的注释。

提交标签到远程仓库
git push origin -tags
注解：就像git push origin master 把本地修改提交到远程仓库一样，-tags可以把本地的打的标签全部提交到远程仓库。

删除标签
git tag -d v1.01
注解：-d 表示删除，后面跟要删除的tag名字

删除远程标签
git push origin :refs/tags/v1.01
注解：就像git push origin :branch_1 可以删除远程仓库的分支branch_1一样， 冒号前为空表示删除远程仓库的tag。

查看标签
git tag
或者
git tag -l

利用tag回滚代码
git checkout v1.01






eclipse 关闭鼠标悬停提示：Window->Preferences->Java->Editor->Hovers-> Combined Hover

	
	
	
shell	

增加临时路径
PATH=$PATH:source/
查看路径，path属性
printenv

图片压缩
mogrify -resize 64x64 *.png



apktool 安装教程
https://ibotpeaches.github.io/Apktool/install/
Windows下
需要将以下链接保存成apktool.bat，（可以创建文本文件，将链接的内容复制到文本文件中，再将该文件的文件名改为apktool.bat即可）
https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/windows/apktool.bat
在从以下链接处下载apktool_2.2.1.jar，再将其修改文件名为apktool.jar
https://bitbucket.org/iBotPeaches/apktool/downloads
最后将一个apk文件和apktool.bat和apktool.jar共置于一个文件夹内
即可运行apktool命令

apktool 反编译命令
apktool.bat d -f test.apk 
apktool d test.apk









android gradle 配置

android {
  compileSdkVersion 23 //要编译的sdk版本号
  buildToolsVersion "23.0.1"

  defaultConfig {
    applicationId "com.example.checkyourtargetsdk"
    minSdkVersion 7 //sdk向下兼容的最低版本号
    targetSdkVersion 23 //sdk行为版本号
    versionCode 1
    versionName “1.0”
  }
}


androidTestCompile和testCompile是测试用的依赖配置

dependencies {
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
    testCompile 'com.squareup.okhttp3:mockwebserver:3.6.0'
}

使用studio创建一个新工程，app/src目录下有三个目录
test
androidTest
main

test可以使用testCompile导入的库
androidTest可以使用androidTestCompile导入的库
main目录下的主工程，则不能使用testCompile导入的库


